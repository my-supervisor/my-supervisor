/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.AccessParamRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessParam extends TableImpl<AccessParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.access_param</code>
     */
    public static final AccessParam ACCESS_PARAM = new AccessParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessParamRecord> getRecordType() {
        return AccessParamRecord.class;
    }

    /**
     * The column <code>public.access_param.creation_date</code>.
     */
    public final TableField<AccessParamRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.access_param.creator_id</code>.
     */
    public final TableField<AccessParamRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.access_param.last_modification_date</code>.
     */
    public final TableField<AccessParamRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.access_param.last_modifier_id</code>.
     */
    public final TableField<AccessParamRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.access_param.owner_id</code>.
     */
    public final TableField<AccessParamRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.access_param.tag</code>.
     */
    public final TableField<AccessParamRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.access_param.id</code>.
     */
    public final TableField<AccessParamRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.access_param.name</code>.
     */
    public final TableField<AccessParamRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.access_param.access_id</code>.
     */
    public final TableField<AccessParamRecord, UUID> ACCESS_ID = createField(DSL.name("access_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.access_param.message</code>.
     */
    public final TableField<AccessParamRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.access_param.default_value</code>.
     */
    public final TableField<AccessParamRecord, String> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.access_param.value_type</code>.
     */
    public final TableField<AccessParamRecord, String> VALUE_TYPE = createField(DSL.name("value_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.access_param.quantifier</code>.
     */
    public final TableField<AccessParamRecord, String> QUANTIFIER = createField(DSL.name("quantifier"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.access_param.code</code>.
     */
    public final TableField<AccessParamRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "");

    private AccessParam(Name alias, Table<AccessParamRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessParam(Name alias, Table<AccessParamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.access_param</code> table reference
     */
    public AccessParam(String alias) {
        this(DSL.name(alias), ACCESS_PARAM);
    }

    /**
     * Create an aliased <code>public.access_param</code> table reference
     */
    public AccessParam(Name alias) {
        this(alias, ACCESS_PARAM);
    }

    /**
     * Create a <code>public.access_param</code> table reference
     */
    public AccessParam() {
        this(DSL.name("access_param"), null);
    }

    public <O extends Record> AccessParam(Table<O> child, ForeignKey<O, AccessParamRecord> key) {
        super(child, key, ACCESS_PARAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccessParamRecord> getPrimaryKey() {
        return Keys.ACCESS_PARAM_PKEY;
    }

    @Override
    public List<ForeignKey<AccessParamRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCESS_PARAM__ACCESS_PARAM_ACCESS_ID_FKEY);
    }

    private transient Access _access;

    /**
     * Get the implicit join path to the <code>public.access</code> table.
     */
    public Access access() {
        if (_access == null)
            _access = new Access(this, Keys.ACCESS_PARAM__ACCESS_PARAM_ACCESS_ID_FKEY);

        return _access;
    }

    @Override
    public AccessParam as(String alias) {
        return new AccessParam(DSL.name(alias), this);
    }

    @Override
    public AccessParam as(Name alias) {
        return new AccessParam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessParam rename(String name) {
        return new AccessParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessParam rename(Name name) {
        return new AccessParam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, UUID, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
