/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.PlanSubscriptionContractRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanSubscriptionContract extends TableImpl<PlanSubscriptionContractRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.plan_subscription_contract</code>
     */
    public static final PlanSubscriptionContract PLAN_SUBSCRIPTION_CONTRACT = new PlanSubscriptionContract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanSubscriptionContractRecord> getRecordType() {
        return PlanSubscriptionContractRecord.class;
    }

    /**
     * The column <code>public.plan_subscription_contract.creation_date</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.plan_subscription_contract.creator_id</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.plan_subscription_contract.last_modification_date</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>public.plan_subscription_contract.last_modifier_id</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_subscription_contract.owner_id</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_subscription_contract.tag</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.plan_subscription_contract.id</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_subscription_contract.plan_id</code>.
     */
    public final TableField<PlanSubscriptionContractRecord, UUID> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.UUID.nullable(false), this, "");

    private PlanSubscriptionContract(Name alias, Table<PlanSubscriptionContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanSubscriptionContract(Name alias, Table<PlanSubscriptionContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.plan_subscription_contract</code> table
     * reference
     */
    public PlanSubscriptionContract(String alias) {
        this(DSL.name(alias), PLAN_SUBSCRIPTION_CONTRACT);
    }

    /**
     * Create an aliased <code>public.plan_subscription_contract</code> table
     * reference
     */
    public PlanSubscriptionContract(Name alias) {
        this(alias, PLAN_SUBSCRIPTION_CONTRACT);
    }

    /**
     * Create a <code>public.plan_subscription_contract</code> table reference
     */
    public PlanSubscriptionContract() {
        this(DSL.name("plan_subscription_contract"), null);
    }

    public <O extends Record> PlanSubscriptionContract(Table<O> child, ForeignKey<O, PlanSubscriptionContractRecord> key) {
        super(child, key, PLAN_SUBSCRIPTION_CONTRACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlanSubscriptionContractRecord> getPrimaryKey() {
        return Keys.PLAN_SUBSCRIPTION_CONTRACT_PKEY;
    }

    @Override
    public List<ForeignKey<PlanSubscriptionContractRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLAN_SUBSCRIPTION_CONTRACT__PLAN_SUBSCRIPTION_CONTRACT_ID_FKEY, Keys.PLAN_SUBSCRIPTION_CONTRACT__PLAN_SUBSCRIPTION_CONTRACT_PLAN_ID_FKEY);
    }

    private transient SubscriptionContract _subscriptionContract;
    private transient Plan _plan;

    /**
     * Get the implicit join path to the
     * <code>public.subscription_contract</code> table.
     */
    public SubscriptionContract subscriptionContract() {
        if (_subscriptionContract == null)
            _subscriptionContract = new SubscriptionContract(this, Keys.PLAN_SUBSCRIPTION_CONTRACT__PLAN_SUBSCRIPTION_CONTRACT_ID_FKEY);

        return _subscriptionContract;
    }

    /**
     * Get the implicit join path to the <code>public.plan</code> table.
     */
    public Plan plan() {
        if (_plan == null)
            _plan = new Plan(this, Keys.PLAN_SUBSCRIPTION_CONTRACT__PLAN_SUBSCRIPTION_CONTRACT_PLAN_ID_FKEY);

        return _plan;
    }

    @Override
    public PlanSubscriptionContract as(String alias) {
        return new PlanSubscriptionContract(DSL.name(alias), this);
    }

    @Override
    public PlanSubscriptionContract as(Name alias) {
        return new PlanSubscriptionContract(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanSubscriptionContract rename(String name) {
        return new PlanSubscriptionContract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanSubscriptionContract rename(Name name) {
        return new PlanSubscriptionContract(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
