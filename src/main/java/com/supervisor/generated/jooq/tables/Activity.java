/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.ActivityRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activity extends TableImpl<ActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activity</code>
     */
    public static final Activity ACTIVITY = new Activity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityRecord> getRecordType() {
        return ActivityRecord.class;
    }

    /**
     * The column <code>public.activity.creation_date</code>.
     */
    public final TableField<ActivityRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.activity.creator_id</code>.
     */
    public final TableField<ActivityRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activity.last_modification_date</code>.
     */
    public final TableField<ActivityRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.activity.last_modifier_id</code>.
     */
    public final TableField<ActivityRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activity.owner_id</code>.
     */
    public final TableField<ActivityRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activity.tag</code>.
     */
    public final TableField<ActivityRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.activity.id</code>.
     */
    public final TableField<ActivityRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activity.name</code>.
     */
    public final TableField<ActivityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.activity.periodicity_id</code>.
     */
    public final TableField<ActivityRecord, UUID> PERIODICITY_ID = createField(DSL.name("periodicity_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activity.description</code>.
     */
    public final TableField<ActivityRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.activity.default_shown</code>.
     */
    public final TableField<ActivityRecord, Boolean> DEFAULT_SHOWN = createField(DSL.name("default_shown"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.activity.version</code>.
     */
    public final TableField<ActivityRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.activity.is_template</code>.
     */
    public final TableField<ActivityRecord, Boolean> IS_TEMPLATE = createField(DSL.name("is_template"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.activity.template_src_id</code>.
     */
    public final TableField<ActivityRecord, UUID> TEMPLATE_SRC_ID = createField(DSL.name("template_src_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.activity.tags</code>.
     */
    public final TableField<ActivityRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.activity.state</code>.
     */
    public final TableField<ActivityRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.activity.designer_id</code>.
     */
    public final TableField<ActivityRecord, UUID> DESIGNER_ID = createField(DSL.name("designer_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.activity.license</code>.
     */
    public final TableField<ActivityRecord, String> LICENSE = createField(DSL.name("license"), SQLDataType.VARCHAR, this, "");

    private Activity(Name alias, Table<ActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activity(Name alias, Table<ActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.activity</code> table reference
     */
    public Activity(String alias) {
        this(DSL.name(alias), ACTIVITY);
    }

    /**
     * Create an aliased <code>public.activity</code> table reference
     */
    public Activity(Name alias) {
        this(alias, ACTIVITY);
    }

    /**
     * Create a <code>public.activity</code> table reference
     */
    public Activity() {
        this(DSL.name("activity"), null);
    }

    public <O extends Record> Activity(Table<O> child, ForeignKey<O, ActivityRecord> key) {
        super(child, key, ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActivityRecord> getPrimaryKey() {
        return Keys.ACTIVITY_PKEY;
    }

    @Override
    public List<ForeignKey<ActivityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACTIVITY__ACTIVITY_PERIODICITY_ID_FKEY, Keys.ACTIVITY__ACTIVITY_TEMPLATE_SRC_ID_FKEY, Keys.ACTIVITY__ACTIVITY_DESIGNER_ID_FKEY);
    }

    private transient Periodicity _periodicity;
    private transient Activity _activity;
    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.periodicity</code> table.
     */
    public Periodicity periodicity() {
        if (_periodicity == null)
            _periodicity = new Periodicity(this, Keys.ACTIVITY__ACTIVITY_PERIODICITY_ID_FKEY);

        return _periodicity;
    }

    /**
     * Get the implicit join path to the <code>public.activity</code> table.
     */
    public Activity activity() {
        if (_activity == null)
            _activity = new Activity(this, Keys.ACTIVITY__ACTIVITY_TEMPLATE_SRC_ID_FKEY);

        return _activity;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.ACTIVITY__ACTIVITY_DESIGNER_ID_FKEY);

        return _user;
    }

    @Override
    public Activity as(String alias) {
        return new Activity(DSL.name(alias), this);
    }

    @Override
    public Activity as(Name alias) {
        return new Activity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activity rename(String name) {
        return new Activity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activity rename(Name name) {
        return new Activity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, UUID, String, Boolean, String, Boolean, UUID, String, String, UUID, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
