/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.DataModelRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataModel extends TableImpl<DataModelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_model</code>
     */
    public static final DataModel DATA_MODEL = new DataModel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataModelRecord> getRecordType() {
        return DataModelRecord.class;
    }

    /**
     * The column <code>public.data_model.creation_date</code>.
     */
    public final TableField<DataModelRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_model.creator_id</code>.
     */
    public final TableField<DataModelRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_model.last_modification_date</code>.
     */
    public final TableField<DataModelRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_model.last_modifier_id</code>.
     */
    public final TableField<DataModelRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_model.owner_id</code>.
     */
    public final TableField<DataModelRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_model.tag</code>.
     */
    public final TableField<DataModelRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.data_model.id</code>.
     */
    public final TableField<DataModelRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_model.description</code>.
     */
    public final TableField<DataModelRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.data_model.is_template</code>.
     */
    public final TableField<DataModelRecord, Boolean> IS_TEMPLATE = createField(DSL.name("is_template"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.data_model.active</code>.
     */
    public final TableField<DataModelRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.data_model.activity_id</code>.
     */
    public final TableField<DataModelRecord, UUID> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_model.name</code>.
     */
    public final TableField<DataModelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.data_model.interacting</code>.
     */
    public final TableField<DataModelRecord, Boolean> INTERACTING = createField(DSL.name("interacting"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.data_model.type</code>.
     */
    public final TableField<DataModelRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.data_model.code</code>.
     */
    public final TableField<DataModelRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "");

    private DataModel(Name alias, Table<DataModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataModel(Name alias, Table<DataModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.data_model</code> table reference
     */
    public DataModel(String alias) {
        this(DSL.name(alias), DATA_MODEL);
    }

    /**
     * Create an aliased <code>public.data_model</code> table reference
     */
    public DataModel(Name alias) {
        this(alias, DATA_MODEL);
    }

    /**
     * Create a <code>public.data_model</code> table reference
     */
    public DataModel() {
        this(DSL.name("data_model"), null);
    }

    public <O extends Record> DataModel(Table<O> child, ForeignKey<O, DataModelRecord> key) {
        super(child, key, DATA_MODEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DataModelRecord> getPrimaryKey() {
        return Keys.DATA_MODEL_PKEY;
    }

    @Override
    public List<ForeignKey<DataModelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DATA_MODEL__DATA_MODEL_ACTIVITY_ID_FKEY);
    }

    private transient Activity _activity;

    /**
     * Get the implicit join path to the <code>public.activity</code> table.
     */
    public Activity activity() {
        if (_activity == null)
            _activity = new Activity(this, Keys.DATA_MODEL__DATA_MODEL_ACTIVITY_ID_FKEY);

        return _activity;
    }

    @Override
    public DataModel as(String alias) {
        return new DataModel(DSL.name(alias), this);
    }

    @Override
    public DataModel as(Name alias) {
        return new DataModel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataModel rename(String name) {
        return new DataModel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataModel rename(Name name) {
        return new DataModel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, Boolean, Boolean, UUID, String, Boolean, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
