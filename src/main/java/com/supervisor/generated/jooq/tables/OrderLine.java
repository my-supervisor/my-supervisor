/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.OrderLineRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderLine extends TableImpl<OrderLineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_line</code>
     */
    public static final OrderLine ORDER_LINE = new OrderLine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderLineRecord> getRecordType() {
        return OrderLineRecord.class;
    }

    /**
     * The column <code>public.order_line.creation_date</code>.
     */
    public final TableField<OrderLineRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.order_line.creator_id</code>.
     */
    public final TableField<OrderLineRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_line.last_modification_date</code>.
     */
    public final TableField<OrderLineRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.order_line.last_modifier_id</code>.
     */
    public final TableField<OrderLineRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_line.owner_id</code>.
     */
    public final TableField<OrderLineRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_line.tag</code>.
     */
    public final TableField<OrderLineRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order_line.id</code>.
     */
    public final TableField<OrderLineRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_line.product_id</code>.
     */
    public final TableField<OrderLineRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_line.description</code>.
     */
    public final TableField<OrderLineRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order_line.order_id</code>.
     */
    public final TableField<OrderLineRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_line.unit_price</code>.
     */
    public final TableField<OrderLineRecord, Double> UNIT_PRICE = createField(DSL.name("unit_price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.order_line.no</code>.
     */
    public final TableField<OrderLineRecord, Integer> NO = createField(DSL.name("no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_line.name</code>.
     */
    public final TableField<OrderLineRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.order_line.base_unit_price</code>.
     */
    public final TableField<OrderLineRecord, Double> BASE_UNIT_PRICE = createField(DSL.name("base_unit_price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.order_line.ht_amount</code>.
     */
    public final TableField<OrderLineRecord, Double> HT_AMOUNT = createField(DSL.name("ht_amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.order_line.quantity</code>.
     */
    public final TableField<OrderLineRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrderLine(Name alias, Table<OrderLineRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderLine(Name alias, Table<OrderLineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order_line</code> table reference
     */
    public OrderLine(String alias) {
        this(DSL.name(alias), ORDER_LINE);
    }

    /**
     * Create an aliased <code>public.order_line</code> table reference
     */
    public OrderLine(Name alias) {
        this(alias, ORDER_LINE);
    }

    /**
     * Create a <code>public.order_line</code> table reference
     */
    public OrderLine() {
        this(DSL.name("order_line"), null);
    }

    public <O extends Record> OrderLine(Table<O> child, ForeignKey<O, OrderLineRecord> key) {
        super(child, key, ORDER_LINE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrderLineRecord> getPrimaryKey() {
        return Keys.ORDER_LINE_PKEY;
    }

    @Override
    public List<ForeignKey<OrderLineRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER_LINE__ORDER_LINE_PRODUCT_ID_FKEY, Keys.ORDER_LINE__ORDER_LINE_ORDER_ID_FKEY);
    }

    private transient Product _product;
    private transient Order _order;

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.ORDER_LINE__ORDER_LINE_PRODUCT_ID_FKEY);

        return _product;
    }

    /**
     * Get the implicit join path to the <code>public.order</code> table.
     */
    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.ORDER_LINE__ORDER_LINE_ORDER_ID_FKEY);

        return _order;
    }

    @Override
    public OrderLine as(String alias) {
        return new OrderLine(DSL.name(alias), this);
    }

    @Override
    public OrderLine as(Name alias) {
        return new OrderLine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderLine rename(String name) {
        return new OrderLine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderLine rename(Name name) {
        return new OrderLine(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID, String, UUID, Double, Integer, String, Double, Double, Integer> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
