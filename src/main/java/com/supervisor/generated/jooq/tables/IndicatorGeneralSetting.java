/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.IndicatorGeneralSettingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorGeneralSetting extends TableImpl<IndicatorGeneralSettingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.indicator_general_setting</code>
     */
    public static final IndicatorGeneralSetting INDICATOR_GENERAL_SETTING = new IndicatorGeneralSetting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorGeneralSettingRecord> getRecordType() {
        return IndicatorGeneralSettingRecord.class;
    }

    /**
     * The column <code>public.indicator_general_setting.creation_date</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.creator_id</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.indicator_general_setting.last_modification_date</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>public.indicator_general_setting.last_modifier_id</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.owner_id</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.tag</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.indicator_general_setting.id</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.description</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.indicator_general_setting.col</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, Integer> COL = createField(DSL.name("col"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.size_x</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, Integer> SIZE_X = createField(DSL.name("size_x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.row</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, Integer> ROW = createField(DSL.name("row"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.activity_id</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, UUID> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.single_label</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> SINGLE_LABEL = createField(DSL.name("single_label"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.periodicity_id</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, UUID> PERIODICITY_ID = createField(DSL.name("periodicity_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.indicator_general_setting.is_template</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, Boolean> IS_TEMPLATE = createField(DSL.name("is_template"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.type_id</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, UUID> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.size_y</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, Integer> SIZE_Y = createField(DSL.name("size_y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.plural_label</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> PLURAL_LABEL = createField(DSL.name("plural_label"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.code</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.indicator_general_setting.state</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.indicator_general_setting.tags</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.indicator_general_setting.name</code>.
     */
    public final TableField<IndicatorGeneralSettingRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    private IndicatorGeneralSetting(Name alias, Table<IndicatorGeneralSettingRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorGeneralSetting(Name alias, Table<IndicatorGeneralSettingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.indicator_general_setting</code> table
     * reference
     */
    public IndicatorGeneralSetting(String alias) {
        this(DSL.name(alias), INDICATOR_GENERAL_SETTING);
    }

    /**
     * Create an aliased <code>public.indicator_general_setting</code> table
     * reference
     */
    public IndicatorGeneralSetting(Name alias) {
        this(alias, INDICATOR_GENERAL_SETTING);
    }

    /**
     * Create a <code>public.indicator_general_setting</code> table reference
     */
    public IndicatorGeneralSetting() {
        this(DSL.name("indicator_general_setting"), null);
    }

    public <O extends Record> IndicatorGeneralSetting(Table<O> child, ForeignKey<O, IndicatorGeneralSettingRecord> key) {
        super(child, key, INDICATOR_GENERAL_SETTING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IndicatorGeneralSettingRecord> getPrimaryKey() {
        return Keys.INDICATOR_GENERAL_SETTING_PKEY;
    }

    @Override
    public List<ForeignKey<IndicatorGeneralSettingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_ACTIVITY_ID_FKEY, Keys.INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_PERIODICITY_ID_FKEY, Keys.INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_TYPE_ID_FKEY);
    }

    private transient Activity _activity;
    private transient Periodicity _periodicity;
    private transient IndicatorType _indicatorType;

    /**
     * Get the implicit join path to the <code>public.activity</code> table.
     */
    public Activity activity() {
        if (_activity == null)
            _activity = new Activity(this, Keys.INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_ACTIVITY_ID_FKEY);

        return _activity;
    }

    /**
     * Get the implicit join path to the <code>public.periodicity</code> table.
     */
    public Periodicity periodicity() {
        if (_periodicity == null)
            _periodicity = new Periodicity(this, Keys.INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_PERIODICITY_ID_FKEY);

        return _periodicity;
    }

    /**
     * Get the implicit join path to the <code>public.indicator_type</code>
     * table.
     */
    public IndicatorType indicatorType() {
        if (_indicatorType == null)
            _indicatorType = new IndicatorType(this, Keys.INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_TYPE_ID_FKEY);

        return _indicatorType;
    }

    @Override
    public IndicatorGeneralSetting as(String alias) {
        return new IndicatorGeneralSetting(DSL.name(alias), this);
    }

    @Override
    public IndicatorGeneralSetting as(Name alias) {
        return new IndicatorGeneralSetting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorGeneralSetting rename(String name) {
        return new IndicatorGeneralSetting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorGeneralSetting rename(Name name) {
        return new IndicatorGeneralSetting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, Integer, Integer, Integer, UUID, String, UUID, Boolean, UUID, Integer, String, String, String, String, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
