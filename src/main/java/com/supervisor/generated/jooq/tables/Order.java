/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.OrderRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>public.order.creation_date</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.order.creator_id</code>.
     */
    public final TableField<OrderRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.last_modification_date</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.order.last_modifier_id</code>.
     */
    public final TableField<OrderRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.owner_id</code>.
     */
    public final TableField<OrderRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.tag</code>.
     */
    public final TableField<OrderRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.id</code>.
     */
    public final TableField<OrderRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.customer_address_id</code>.
     */
    public final TableField<OrderRecord, UUID> CUSTOMER_ADDRESS_ID = createField(DSL.name("customer_address_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.supplier_address_id</code>.
     */
    public final TableField<OrderRecord, UUID> SUPPLIER_ADDRESS_ID = createField(DSL.name("supplier_address_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.type</code>.
     */
    public final TableField<OrderRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.order.reference</code>.
     */
    public final TableField<OrderRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.publishing_date</code>.
     */
    public final TableField<OrderRecord, LocalDate> PUBLISHING_DATE = createField(DSL.name("publishing_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.order.customer_id</code>.
     */
    public final TableField<OrderRecord, UUID> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.supplier_id</code>.
     */
    public final TableField<OrderRecord, UUID> SUPPLIER_ID = createField(DSL.name("supplier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.vat_amount</code>.
     */
    public final TableField<OrderRecord, Double> VAT_AMOUNT = createField(DSL.name("vat_amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.order.total_amount</code>.
     */
    public final TableField<OrderRecord, Double> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.order.billing_currency_id</code>.
     */
    public final TableField<OrderRecord, UUID> BILLING_CURRENCY_ID = createField(DSL.name("billing_currency_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.exchange_rate</code>.
     */
    public final TableField<OrderRecord, Double> EXCHANGE_RATE = createField(DSL.name("exchange_rate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.order.currency_id</code>.
     */
    public final TableField<OrderRecord, UUID> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order.description</code>.
     */
    public final TableField<OrderRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order.amount</code>.
     */
    public final TableField<OrderRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>public.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.ORDER_PKEY;
    }

    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER__ORDER_CUSTOMER_ADDRESS_ID_FKEY, Keys.ORDER__ORDER_SUPPLIER_ADDRESS_ID_FKEY, Keys.ORDER__ORDER_CUSTOMER_ID_FKEY, Keys.ORDER__ORDER_SUPPLIER_ID_FKEY, Keys.ORDER__ORDER_BILLING_CURRENCY_ID_FKEY, Keys.ORDER__ORDER_CURRENCY_ID_FKEY);
    }

    private transient Address _address;
    private transient BillingAddress _billingAddress;
    private transient Person _orderCustomerIdFkey;
    private transient Person _orderSupplierIdFkey;
    private transient Currency _orderBillingCurrencyIdFkey;
    private transient Currency _orderCurrencyIdFkey;

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.ORDER__ORDER_CUSTOMER_ADDRESS_ID_FKEY);

        return _address;
    }

    /**
     * Get the implicit join path to the <code>public.billing_address</code>
     * table.
     */
    public BillingAddress billingAddress() {
        if (_billingAddress == null)
            _billingAddress = new BillingAddress(this, Keys.ORDER__ORDER_SUPPLIER_ADDRESS_ID_FKEY);

        return _billingAddress;
    }

    /**
     * Get the implicit join path to the <code>public.person</code> table, via
     * the <code>order_customer_id_fkey</code> key.
     */
    public Person orderCustomerIdFkey() {
        if (_orderCustomerIdFkey == null)
            _orderCustomerIdFkey = new Person(this, Keys.ORDER__ORDER_CUSTOMER_ID_FKEY);

        return _orderCustomerIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.person</code> table, via
     * the <code>order_supplier_id_fkey</code> key.
     */
    public Person orderSupplierIdFkey() {
        if (_orderSupplierIdFkey == null)
            _orderSupplierIdFkey = new Person(this, Keys.ORDER__ORDER_SUPPLIER_ID_FKEY);

        return _orderSupplierIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.currency</code> table, via
     * the <code>order_billing_currency_id_fkey</code> key.
     */
    public Currency orderBillingCurrencyIdFkey() {
        if (_orderBillingCurrencyIdFkey == null)
            _orderBillingCurrencyIdFkey = new Currency(this, Keys.ORDER__ORDER_BILLING_CURRENCY_ID_FKEY);

        return _orderBillingCurrencyIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.currency</code> table, via
     * the <code>order_currency_id_fkey</code> key.
     */
    public Currency orderCurrencyIdFkey() {
        if (_orderCurrencyIdFkey == null)
            _orderCurrencyIdFkey = new Currency(this, Keys.ORDER__ORDER_CURRENCY_ID_FKEY);

        return _orderCurrencyIdFkey;
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID, UUID, String, String, LocalDate, UUID, UUID, Double, Double, UUID, Double, UUID, String, Double> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
