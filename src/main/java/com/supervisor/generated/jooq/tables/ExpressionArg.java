/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.ExpressionArgRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpressionArg extends TableImpl<ExpressionArgRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.expression_arg</code>
     */
    public static final ExpressionArg EXPRESSION_ARG = new ExpressionArg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpressionArgRecord> getRecordType() {
        return ExpressionArgRecord.class;
    }

    /**
     * The column <code>public.expression_arg.creation_date</code>.
     */
    public final TableField<ExpressionArgRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.creator_id</code>.
     */
    public final TableField<ExpressionArgRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.last_modification_date</code>.
     */
    public final TableField<ExpressionArgRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.last_modifier_id</code>.
     */
    public final TableField<ExpressionArgRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.owner_id</code>.
     */
    public final TableField<ExpressionArgRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.tag</code>.
     */
    public final TableField<ExpressionArgRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.expression_arg.id</code>.
     */
    public final TableField<ExpressionArgRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.expression_id</code>.
     */
    public final TableField<ExpressionArgRecord, UUID> EXPRESSION_ID = createField(DSL.name("expression_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.type</code>.
     */
    public final TableField<ExpressionArgRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.expression_arg.no</code>.
     */
    public final TableField<ExpressionArgRecord, Integer> NO = createField(DSL.name("no"), SQLDataType.INTEGER.nullable(false), this, "");

    private ExpressionArg(Name alias, Table<ExpressionArgRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExpressionArg(Name alias, Table<ExpressionArgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.expression_arg</code> table reference
     */
    public ExpressionArg(String alias) {
        this(DSL.name(alias), EXPRESSION_ARG);
    }

    /**
     * Create an aliased <code>public.expression_arg</code> table reference
     */
    public ExpressionArg(Name alias) {
        this(alias, EXPRESSION_ARG);
    }

    /**
     * Create a <code>public.expression_arg</code> table reference
     */
    public ExpressionArg() {
        this(DSL.name("expression_arg"), null);
    }

    public <O extends Record> ExpressionArg(Table<O> child, ForeignKey<O, ExpressionArgRecord> key) {
        super(child, key, EXPRESSION_ARG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExpressionArgRecord> getPrimaryKey() {
        return Keys.EXPRESSION_ARG_PKEY;
    }

    @Override
    public List<ForeignKey<ExpressionArgRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXPRESSION_ARG__EXPRESSION_ARG_EXPRESSION_ID_FKEY);
    }

    private transient FormularExpression _formularExpression;

    /**
     * Get the implicit join path to the <code>public.formular_expression</code>
     * table.
     */
    public FormularExpression formularExpression() {
        if (_formularExpression == null)
            _formularExpression = new FormularExpression(this, Keys.EXPRESSION_ARG__EXPRESSION_ARG_EXPRESSION_ID_FKEY);

        return _formularExpression;
    }

    @Override
    public ExpressionArg as(String alias) {
        return new ExpressionArg(DSL.name(alias), this);
    }

    @Override
    public ExpressionArg as(Name alias) {
        return new ExpressionArg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpressionArg rename(String name) {
        return new ExpressionArg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpressionArg rename(Name name) {
        return new ExpressionArg(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
