/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.DataSheetRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataSheet extends TableImpl<DataSheetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_sheet</code>
     */
    public static final DataSheet DATA_SHEET = new DataSheet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataSheetRecord> getRecordType() {
        return DataSheetRecord.class;
    }

    /**
     * The column <code>public.data_sheet.creation_date</code>.
     */
    public final TableField<DataSheetRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.creator_id</code>.
     */
    public final TableField<DataSheetRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.last_modification_date</code>.
     */
    public final TableField<DataSheetRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.last_modifier_id</code>.
     */
    public final TableField<DataSheetRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.owner_id</code>.
     */
    public final TableField<DataSheetRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.tag</code>.
     */
    public final TableField<DataSheetRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.data_sheet.id</code>.
     */
    public final TableField<DataSheetRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.date</code>.
     */
    public final TableField<DataSheetRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.reference</code>.
     */
    public final TableField<DataSheetRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.model_id</code>.
     */
    public final TableField<DataSheetRecord, UUID> MODEL_ID = createField(DSL.name("model_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet.table_id</code>.
     */
    public final TableField<DataSheetRecord, UUID> TABLE_ID = createField(DSL.name("table_id"), SQLDataType.UUID, this, "");

    private DataSheet(Name alias, Table<DataSheetRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataSheet(Name alias, Table<DataSheetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.data_sheet</code> table reference
     */
    public DataSheet(String alias) {
        this(DSL.name(alias), DATA_SHEET);
    }

    /**
     * Create an aliased <code>public.data_sheet</code> table reference
     */
    public DataSheet(Name alias) {
        this(alias, DATA_SHEET);
    }

    /**
     * Create a <code>public.data_sheet</code> table reference
     */
    public DataSheet() {
        this(DSL.name("data_sheet"), null);
    }

    public <O extends Record> DataSheet(Table<O> child, ForeignKey<O, DataSheetRecord> key) {
        super(child, key, DATA_SHEET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DataSheetRecord> getPrimaryKey() {
        return Keys.DATA_SHEET_PKEY;
    }

    @Override
    public List<ForeignKey<DataSheetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DATA_SHEET__DATA_SHEET_MODEL_ID_FKEY, Keys.DATA_SHEET__DATA_SHEET_TABLE_ID_FKEY);
    }

    private transient DataSheetModel _dataSheetModel;
    private transient DataFieldOfSheet _dataFieldOfSheet;

    /**
     * Get the implicit join path to the <code>public.data_sheet_model</code>
     * table.
     */
    public DataSheetModel dataSheetModel() {
        if (_dataSheetModel == null)
            _dataSheetModel = new DataSheetModel(this, Keys.DATA_SHEET__DATA_SHEET_MODEL_ID_FKEY);

        return _dataSheetModel;
    }

    /**
     * Get the implicit join path to the <code>public.data_field_of_sheet</code>
     * table.
     */
    public DataFieldOfSheet dataFieldOfSheet() {
        if (_dataFieldOfSheet == null)
            _dataFieldOfSheet = new DataFieldOfSheet(this, Keys.DATA_SHEET__DATA_SHEET_TABLE_ID_FKEY);

        return _dataFieldOfSheet;
    }

    @Override
    public DataSheet as(String alias) {
        return new DataSheet(DSL.name(alias), this);
    }

    @Override
    public DataSheet as(Name alias) {
        return new DataSheet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataSheet rename(String name) {
        return new DataSheet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataSheet rename(Name name) {
        return new DataSheet(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, LocalDate, String, UUID, UUID> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
