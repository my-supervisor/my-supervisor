/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.RecordableRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Recordable extends TableImpl<RecordableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recordable</code>
     */
    public static final Recordable RECORDABLE = new Recordable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordableRecord> getRecordType() {
        return RecordableRecord.class;
    }

    /**
     * The column <code>public.recordable.creation_date</code>.
     */
    public final TableField<RecordableRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.recordable.creator_id</code>.
     */
    public final TableField<RecordableRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.recordable.last_modification_date</code>.
     */
    public final TableField<RecordableRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.recordable.last_modifier_id</code>.
     */
    public final TableField<RecordableRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.recordable.owner_id</code>.
     */
    public final TableField<RecordableRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.recordable.tag</code>.
     */
    public final TableField<RecordableRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    private Recordable(Name alias, Table<RecordableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Recordable(Name alias, Table<RecordableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.recordable</code> table reference
     */
    public Recordable(String alias) {
        this(DSL.name(alias), RECORDABLE);
    }

    /**
     * Create an aliased <code>public.recordable</code> table reference
     */
    public Recordable(Name alias) {
        this(alias, RECORDABLE);
    }

    /**
     * Create a <code>public.recordable</code> table reference
     */
    public Recordable() {
        this(DSL.name("recordable"), null);
    }

    public <O extends Record> Recordable(Table<O> child, ForeignKey<O, RecordableRecord> key) {
        super(child, key, RECORDABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<RecordableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RECORDABLE__RECORDABLE_CREATOR_ID_FKEY, Keys.RECORDABLE__RECORDABLE_LAST_MODIFIER_ID_FKEY, Keys.RECORDABLE__RECORDABLE_OWNER_ID_FKEY);
    }

    private transient User _recordableCreatorIdFkey;
    private transient User _recordableLastModifierIdFkey;
    private transient User _recordableOwnerIdFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>recordable_creator_id_fkey</code> key.
     */
    public User recordableCreatorIdFkey() {
        if (_recordableCreatorIdFkey == null)
            _recordableCreatorIdFkey = new User(this, Keys.RECORDABLE__RECORDABLE_CREATOR_ID_FKEY);

        return _recordableCreatorIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>recordable_last_modifier_id_fkey</code> key.
     */
    public User recordableLastModifierIdFkey() {
        if (_recordableLastModifierIdFkey == null)
            _recordableLastModifierIdFkey = new User(this, Keys.RECORDABLE__RECORDABLE_LAST_MODIFIER_ID_FKEY);

        return _recordableLastModifierIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>recordable_owner_id_fkey</code> key.
     */
    public User recordableOwnerIdFkey() {
        if (_recordableOwnerIdFkey == null)
            _recordableOwnerIdFkey = new User(this, Keys.RECORDABLE__RECORDABLE_OWNER_ID_FKEY);

        return _recordableOwnerIdFkey;
    }

    @Override
    public Recordable as(String alias) {
        return new Recordable(DSL.name(alias), this);
    }

    @Override
    public Recordable as(Name alias) {
        return new Recordable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Recordable rename(String name) {
        return new Recordable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recordable rename(Name name) {
        return new Recordable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
