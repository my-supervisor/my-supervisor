/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.DataSheetModelRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataSheetModel extends TableImpl<DataSheetModelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_sheet_model</code>
     */
    public static final DataSheetModel DATA_SHEET_MODEL = new DataSheetModel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataSheetModelRecord> getRecordType() {
        return DataSheetModelRecord.class;
    }

    /**
     * The column <code>public.data_sheet_model.creation_date</code>.
     */
    public final TableField<DataSheetModelRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_sheet_model.creator_id</code>.
     */
    public final TableField<DataSheetModelRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet_model.last_modification_date</code>.
     */
    public final TableField<DataSheetModelRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_sheet_model.last_modifier_id</code>.
     */
    public final TableField<DataSheetModelRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet_model.owner_id</code>.
     */
    public final TableField<DataSheetModelRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet_model.tag</code>.
     */
    public final TableField<DataSheetModelRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.data_sheet_model.id</code>.
     */
    public final TableField<DataSheetModelRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_sheet_model.can_merge_at_same_date</code>.
     */
    public final TableField<DataSheetModelRecord, Boolean> CAN_MERGE_AT_SAME_DATE = createField(DSL.name("can_merge_at_same_date"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private DataSheetModel(Name alias, Table<DataSheetModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataSheetModel(Name alias, Table<DataSheetModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.data_sheet_model</code> table reference
     */
    public DataSheetModel(String alias) {
        this(DSL.name(alias), DATA_SHEET_MODEL);
    }

    /**
     * Create an aliased <code>public.data_sheet_model</code> table reference
     */
    public DataSheetModel(Name alias) {
        this(alias, DATA_SHEET_MODEL);
    }

    /**
     * Create a <code>public.data_sheet_model</code> table reference
     */
    public DataSheetModel() {
        this(DSL.name("data_sheet_model"), null);
    }

    public <O extends Record> DataSheetModel(Table<O> child, ForeignKey<O, DataSheetModelRecord> key) {
        super(child, key, DATA_SHEET_MODEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DataSheetModelRecord> getPrimaryKey() {
        return Keys.DATA_SHEET_MODEL_PKEY;
    }

    @Override
    public List<ForeignKey<DataSheetModelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DATA_SHEET_MODEL__DATA_SHEET_MODEL_ID_FKEY);
    }

    private transient DataModel _dataModel;

    /**
     * Get the implicit join path to the <code>public.data_model</code> table.
     */
    public DataModel dataModel() {
        if (_dataModel == null)
            _dataModel = new DataModel(this, Keys.DATA_SHEET_MODEL__DATA_SHEET_MODEL_ID_FKEY);

        return _dataModel;
    }

    @Override
    public DataSheetModel as(String alias) {
        return new DataSheetModel(DSL.name(alias), this);
    }

    @Override
    public DataSheetModel as(Name alias) {
        return new DataSheetModel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataSheetModel rename(String name) {
        return new DataSheetModel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataSheetModel rename(Name name) {
        return new DataSheetModel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
