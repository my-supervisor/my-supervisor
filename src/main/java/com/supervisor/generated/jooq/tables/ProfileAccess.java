/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.ProfileAccessRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfileAccess extends TableImpl<ProfileAccessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.profile_access</code>
     */
    public static final ProfileAccess PROFILE_ACCESS = new ProfileAccess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfileAccessRecord> getRecordType() {
        return ProfileAccessRecord.class;
    }

    /**
     * The column <code>public.profile_access.creation_date</code>.
     */
    public final TableField<ProfileAccessRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.profile_access.creator_id</code>.
     */
    public final TableField<ProfileAccessRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_access.last_modification_date</code>.
     */
    public final TableField<ProfileAccessRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.profile_access.last_modifier_id</code>.
     */
    public final TableField<ProfileAccessRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_access.owner_id</code>.
     */
    public final TableField<ProfileAccessRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_access.tag</code>.
     */
    public final TableField<ProfileAccessRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.profile_access.id</code>.
     */
    public final TableField<ProfileAccessRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_access.access_inherited_id</code>.
     */
    public final TableField<ProfileAccessRecord, UUID> ACCESS_INHERITED_ID = createField(DSL.name("access_inherited_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_access.profile_id</code>.
     */
    public final TableField<ProfileAccessRecord, UUID> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.UUID.nullable(false), this, "");

    private ProfileAccess(Name alias, Table<ProfileAccessRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProfileAccess(Name alias, Table<ProfileAccessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.profile_access</code> table reference
     */
    public ProfileAccess(String alias) {
        this(DSL.name(alias), PROFILE_ACCESS);
    }

    /**
     * Create an aliased <code>public.profile_access</code> table reference
     */
    public ProfileAccess(Name alias) {
        this(alias, PROFILE_ACCESS);
    }

    /**
     * Create a <code>public.profile_access</code> table reference
     */
    public ProfileAccess() {
        this(DSL.name("profile_access"), null);
    }

    public <O extends Record> ProfileAccess(Table<O> child, ForeignKey<O, ProfileAccessRecord> key) {
        super(child, key, PROFILE_ACCESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProfileAccessRecord> getPrimaryKey() {
        return Keys.PROFILE_ACCESS_PKEY;
    }

    @Override
    public List<ForeignKey<ProfileAccessRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROFILE_ACCESS__PROFILE_ACCESS_ACCESS_INHERITED_ID_FKEY, Keys.PROFILE_ACCESS__PROFILE_ACCESS_PROFILE_ID_FKEY);
    }

    private transient Access _access;
    private transient Profile _profile;

    /**
     * Get the implicit join path to the <code>public.access</code> table.
     */
    public Access access() {
        if (_access == null)
            _access = new Access(this, Keys.PROFILE_ACCESS__PROFILE_ACCESS_ACCESS_INHERITED_ID_FKEY);

        return _access;
    }

    /**
     * Get the implicit join path to the <code>public.profile</code> table.
     */
    public Profile profile() {
        if (_profile == null)
            _profile = new Profile(this, Keys.PROFILE_ACCESS__PROFILE_ACCESS_PROFILE_ID_FKEY);

        return _profile;
    }

    @Override
    public ProfileAccess as(String alias) {
        return new ProfileAccess(DSL.name(alias), this);
    }

    @Override
    public ProfileAccess as(Name alias) {
        return new ProfileAccess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileAccess rename(String name) {
        return new ProfileAccess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileAccess rename(Name name) {
        return new ProfileAccess(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID, UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
