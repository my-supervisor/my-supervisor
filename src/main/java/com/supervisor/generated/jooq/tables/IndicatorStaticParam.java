/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.IndicatorStaticParamRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorStaticParam extends TableImpl<IndicatorStaticParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.indicator_static_param</code>
     */
    public static final IndicatorStaticParam INDICATOR_STATIC_PARAM = new IndicatorStaticParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorStaticParamRecord> getRecordType() {
        return IndicatorStaticParamRecord.class;
    }

    /**
     * The column <code>public.indicator_static_param.creation_date</code>.
     */
    public final TableField<IndicatorStaticParamRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.indicator_static_param.creator_id</code>.
     */
    public final TableField<IndicatorStaticParamRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.indicator_static_param.last_modification_date</code>.
     */
    public final TableField<IndicatorStaticParamRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.indicator_static_param.last_modifier_id</code>.
     */
    public final TableField<IndicatorStaticParamRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_static_param.owner_id</code>.
     */
    public final TableField<IndicatorStaticParamRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_static_param.tag</code>.
     */
    public final TableField<IndicatorStaticParamRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.indicator_static_param.id</code>.
     */
    public final TableField<IndicatorStaticParamRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_static_param.origin_id</code>.
     */
    public final TableField<IndicatorStaticParamRecord, UUID> ORIGIN_ID = createField(DSL.name("origin_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_static_param.value</code>.
     */
    public final TableField<IndicatorStaticParamRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.indicator_static_param.indicator_id</code>.
     */
    public final TableField<IndicatorStaticParamRecord, UUID> INDICATOR_ID = createField(DSL.name("indicator_id"), SQLDataType.UUID.nullable(false), this, "");

    private IndicatorStaticParam(Name alias, Table<IndicatorStaticParamRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorStaticParam(Name alias, Table<IndicatorStaticParamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.indicator_static_param</code> table
     * reference
     */
    public IndicatorStaticParam(String alias) {
        this(DSL.name(alias), INDICATOR_STATIC_PARAM);
    }

    /**
     * Create an aliased <code>public.indicator_static_param</code> table
     * reference
     */
    public IndicatorStaticParam(Name alias) {
        this(alias, INDICATOR_STATIC_PARAM);
    }

    /**
     * Create a <code>public.indicator_static_param</code> table reference
     */
    public IndicatorStaticParam() {
        this(DSL.name("indicator_static_param"), null);
    }

    public <O extends Record> IndicatorStaticParam(Table<O> child, ForeignKey<O, IndicatorStaticParamRecord> key) {
        super(child, key, INDICATOR_STATIC_PARAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IndicatorStaticParamRecord> getPrimaryKey() {
        return Keys.INDICATOR_STATIC_PARAM_PKEY;
    }

    @Override
    public List<ForeignKey<IndicatorStaticParamRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INDICATOR_STATIC_PARAM__INDICATOR_STATIC_PARAM_ORIGIN_ID_FKEY, Keys.INDICATOR_STATIC_PARAM__INDICATOR_STATIC_PARAM_INDICATOR_ID_FKEY);
    }

    private transient IndicatorTypeParam _indicatorTypeParam;
    private transient IndicatorGeneralSetting _indicatorGeneralSetting;

    /**
     * Get the implicit join path to the
     * <code>public.indicator_type_param</code> table.
     */
    public IndicatorTypeParam indicatorTypeParam() {
        if (_indicatorTypeParam == null)
            _indicatorTypeParam = new IndicatorTypeParam(this, Keys.INDICATOR_STATIC_PARAM__INDICATOR_STATIC_PARAM_ORIGIN_ID_FKEY);

        return _indicatorTypeParam;
    }

    /**
     * Get the implicit join path to the
     * <code>public.indicator_general_setting</code> table.
     */
    public IndicatorGeneralSetting indicatorGeneralSetting() {
        if (_indicatorGeneralSetting == null)
            _indicatorGeneralSetting = new IndicatorGeneralSetting(this, Keys.INDICATOR_STATIC_PARAM__INDICATOR_STATIC_PARAM_INDICATOR_ID_FKEY);

        return _indicatorGeneralSetting;
    }

    @Override
    public IndicatorStaticParam as(String alias) {
        return new IndicatorStaticParam(DSL.name(alias), this);
    }

    @Override
    public IndicatorStaticParam as(Name alias) {
        return new IndicatorStaticParam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorStaticParam rename(String name) {
        return new IndicatorStaticParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorStaticParam rename(Name name) {
        return new IndicatorStaticParam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID, String, UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
