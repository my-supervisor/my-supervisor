/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.AddressRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>public.address.creation_date</code>.
     */
    public final TableField<AddressRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.address.creator_id</code>.
     */
    public final TableField<AddressRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.address.last_modification_date</code>.
     */
    public final TableField<AddressRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.address.last_modifier_id</code>.
     */
    public final TableField<AddressRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.address.owner_id</code>.
     */
    public final TableField<AddressRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.address.tag</code>.
     */
    public final TableField<AddressRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.id</code>.
     */
    public final TableField<AddressRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.address.address_line1</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_LINE1 = createField(DSL.name("address_line1"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.address_line2</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_LINE2 = createField(DSL.name("address_line2"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.company</code>.
     */
    public final TableField<AddressRecord, String> COMPANY = createField(DSL.name("company"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.email</code>.
     */
    public final TableField<AddressRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.address.phone1</code>.
     */
    public final TableField<AddressRecord, String> PHONE1 = createField(DSL.name("phone1"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.phone2</code>.
     */
    public final TableField<AddressRecord, String> PHONE2 = createField(DSL.name("phone2"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.state_or_province</code>.
     */
    public final TableField<AddressRecord, String> STATE_OR_PROVINCE = createField(DSL.name("state_or_province"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.city</code>.
     */
    public final TableField<AddressRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.address.country_id</code>.
     */
    public final TableField<AddressRecord, UUID> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.UUID.nullable(false), this, "");

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    /**
     * Create a <code>public.address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    public <O extends Record> Address(Table<O> child, ForeignKey<O, AddressRecord> key) {
        super(child, key, ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ADDRESS__ADDRESS_COUNTRY_ID_FKEY);
    }

    private transient Country _country;

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.ADDRESS__ADDRESS_COUNTRY_ID_FKEY);

        return _country;
    }

    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, String, String, String, String, String, String, String, UUID> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
