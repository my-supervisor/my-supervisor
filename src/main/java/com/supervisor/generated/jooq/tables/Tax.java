/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.TaxRecord;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tax extends TableImpl<TaxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tax</code>
     */
    public static final Tax TAX = new Tax();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxRecord> getRecordType() {
        return TaxRecord.class;
    }

    /**
     * The column <code>public.tax.creation_date</code>.
     */
    public final TableField<TaxRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.tax.creator_id</code>.
     */
    public final TableField<TaxRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tax.last_modification_date</code>.
     */
    public final TableField<TaxRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.tax.last_modifier_id</code>.
     */
    public final TableField<TaxRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tax.owner_id</code>.
     */
    public final TableField<TaxRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tax.tag</code>.
     */
    public final TableField<TaxRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.tax.id</code>.
     */
    public final TableField<TaxRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tax.short_name</code>.
     */
    public final TableField<TaxRecord, String> SHORT_NAME = createField(DSL.name("short_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tax.value_type</code>.
     */
    public final TableField<TaxRecord, String> VALUE_TYPE = createField(DSL.name("value_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tax.type</code>.
     */
    public final TableField<TaxRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tax.value</code>.
     */
    public final TableField<TaxRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.tax.name</code>.
     */
    public final TableField<TaxRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Tax(Name alias, Table<TaxRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tax(Name alias, Table<TaxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tax</code> table reference
     */
    public Tax(String alias) {
        this(DSL.name(alias), TAX);
    }

    /**
     * Create an aliased <code>public.tax</code> table reference
     */
    public Tax(Name alias) {
        this(alias, TAX);
    }

    /**
     * Create a <code>public.tax</code> table reference
     */
    public Tax() {
        this(DSL.name("tax"), null);
    }

    public <O extends Record> Tax(Table<O> child, ForeignKey<O, TaxRecord> key) {
        super(child, key, TAX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TaxRecord> getPrimaryKey() {
        return Keys.TAX_PKEY;
    }

    @Override
    public Tax as(String alias) {
        return new Tax(DSL.name(alias), this);
    }

    @Override
    public Tax as(Name alias) {
        return new Tax(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tax rename(String name) {
        return new Tax(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tax rename(Name name) {
        return new Tax(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, String, String, Double, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
