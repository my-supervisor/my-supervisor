/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.PaymentMethodRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentMethod extends TableImpl<PaymentMethodRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment_method</code>
     */
    public static final PaymentMethod PAYMENT_METHOD = new PaymentMethod();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentMethodRecord> getRecordType() {
        return PaymentMethodRecord.class;
    }

    /**
     * The column <code>public.payment_method.creation_date</code>.
     */
    public final TableField<PaymentMethodRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.payment_method.creator_id</code>.
     */
    public final TableField<PaymentMethodRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.last_modification_date</code>.
     */
    public final TableField<PaymentMethodRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.payment_method.last_modifier_id</code>.
     */
    public final TableField<PaymentMethodRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.owner_id</code>.
     */
    public final TableField<PaymentMethodRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.tag</code>.
     */
    public final TableField<PaymentMethodRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.payment_method.id</code>.
     */
    public final TableField<PaymentMethodRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.password</code>.
     */
    public final TableField<PaymentMethodRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.payment_method.online</code>.
     */
    public final TableField<PaymentMethodRecord, Boolean> ONLINE = createField(DSL.name("online"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.username</code>.
     */
    public final TableField<PaymentMethodRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.payment_method.default_cashier_id</code>.
     */
    public final TableField<PaymentMethodRecord, UUID> DEFAULT_CASHIER_ID = createField(DSL.name("default_cashier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.logo</code>.
     */
    public final TableField<PaymentMethodRecord, String> LOGO = createField(DSL.name("logo"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.enabled</code>.
     */
    public final TableField<PaymentMethodRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.type</code>.
     */
    public final TableField<PaymentMethodRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_method.name</code>.
     */
    public final TableField<PaymentMethodRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    private PaymentMethod(Name alias, Table<PaymentMethodRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentMethod(Name alias, Table<PaymentMethodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.payment_method</code> table reference
     */
    public PaymentMethod(String alias) {
        this(DSL.name(alias), PAYMENT_METHOD);
    }

    /**
     * Create an aliased <code>public.payment_method</code> table reference
     */
    public PaymentMethod(Name alias) {
        this(alias, PAYMENT_METHOD);
    }

    /**
     * Create a <code>public.payment_method</code> table reference
     */
    public PaymentMethod() {
        this(DSL.name("payment_method"), null);
    }

    public <O extends Record> PaymentMethod(Table<O> child, ForeignKey<O, PaymentMethodRecord> key) {
        super(child, key, PAYMENT_METHOD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PaymentMethodRecord> getPrimaryKey() {
        return Keys.PAYMENT_METHOD_PKEY;
    }

    @Override
    public List<ForeignKey<PaymentMethodRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENT_METHOD__PAYMENT_METHOD_DEFAULT_CASHIER_ID_FKEY);
    }

    private transient Person _person;

    /**
     * Get the implicit join path to the <code>public.person</code> table.
     */
    public Person person() {
        if (_person == null)
            _person = new Person(this, Keys.PAYMENT_METHOD__PAYMENT_METHOD_DEFAULT_CASHIER_ID_FKEY);

        return _person;
    }

    @Override
    public PaymentMethod as(String alias) {
        return new PaymentMethod(DSL.name(alias), this);
    }

    @Override
    public PaymentMethod as(Name alias) {
        return new PaymentMethod(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentMethod rename(String name) {
        return new PaymentMethod(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentMethod rename(Name name) {
        return new PaymentMethod(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, Boolean, String, UUID, String, Boolean, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
