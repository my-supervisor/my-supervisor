/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.RegistrationRequestRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegistrationRequest extends TableImpl<RegistrationRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.registration_request</code>
     */
    public static final RegistrationRequest REGISTRATION_REQUEST = new RegistrationRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegistrationRequestRecord> getRecordType() {
        return RegistrationRequestRecord.class;
    }

    /**
     * The column <code>public.registration_request.creation_date</code>.
     */
    public final TableField<RegistrationRequestRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.registration_request.creator_id</code>.
     */
    public final TableField<RegistrationRequestRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.registration_request.last_modification_date</code>.
     */
    public final TableField<RegistrationRequestRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.registration_request.last_modifier_id</code>.
     */
    public final TableField<RegistrationRequestRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.registration_request.owner_id</code>.
     */
    public final TableField<RegistrationRequestRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.registration_request.tag</code>.
     */
    public final TableField<RegistrationRequestRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.registration_request.id</code>.
     */
    public final TableField<RegistrationRequestRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.registration_request.password</code>.
     */
    public final TableField<RegistrationRequestRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.registration_request.name</code>.
     */
    public final TableField<RegistrationRequestRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column
     * <code>public.registration_request.preferred_language_id</code>.
     */
    public final TableField<RegistrationRequestRecord, UUID> PREFERRED_LANGUAGE_ID = createField(DSL.name("preferred_language_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.registration_request.dead_line</code>.
     */
    public final TableField<RegistrationRequestRecord, LocalDateTime> DEAD_LINE = createField(DSL.name("dead_line"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.registration_request.status</code>.
     */
    public final TableField<RegistrationRequestRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.registration_request.salt</code>.
     */
    public final TableField<RegistrationRequestRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.registration_request.applicant_id</code>.
     */
    public final TableField<RegistrationRequestRecord, UUID> APPLICANT_ID = createField(DSL.name("applicant_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.registration_request.email</code>.
     */
    public final TableField<RegistrationRequestRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR.nullable(false), this, "");

    private RegistrationRequest(Name alias, Table<RegistrationRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegistrationRequest(Name alias, Table<RegistrationRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.registration_request</code> table
     * reference
     */
    public RegistrationRequest(String alias) {
        this(DSL.name(alias), REGISTRATION_REQUEST);
    }

    /**
     * Create an aliased <code>public.registration_request</code> table
     * reference
     */
    public RegistrationRequest(Name alias) {
        this(alias, REGISTRATION_REQUEST);
    }

    /**
     * Create a <code>public.registration_request</code> table reference
     */
    public RegistrationRequest() {
        this(DSL.name("registration_request"), null);
    }

    public <O extends Record> RegistrationRequest(Table<O> child, ForeignKey<O, RegistrationRequestRecord> key) {
        super(child, key, REGISTRATION_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RegistrationRequestRecord> getPrimaryKey() {
        return Keys.REGISTRATION_REQUEST_PKEY;
    }

    @Override
    public List<ForeignKey<RegistrationRequestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REGISTRATION_REQUEST__REGISTRATION_REQUEST_PREFERRED_LANGUAGE_ID_FKEY, Keys.REGISTRATION_REQUEST__REGISTRATION_REQUEST_APPLICANT_ID_FKEY);
    }

    private transient Language _language;
    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.language</code> table.
     */
    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.REGISTRATION_REQUEST__REGISTRATION_REQUEST_PREFERRED_LANGUAGE_ID_FKEY);

        return _language;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.REGISTRATION_REQUEST__REGISTRATION_REQUEST_APPLICANT_ID_FKEY);

        return _user;
    }

    @Override
    public RegistrationRequest as(String alias) {
        return new RegistrationRequest(DSL.name(alias), this);
    }

    @Override
    public RegistrationRequest as(Name alias) {
        return new RegistrationRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegistrationRequest rename(String name) {
        return new RegistrationRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegistrationRequest rename(Name name) {
        return new RegistrationRequest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, String, UUID, LocalDateTime, String, String, UUID, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
