/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.OrderTaxRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderTax extends TableImpl<OrderTaxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_tax</code>
     */
    public static final OrderTax ORDER_TAX = new OrderTax();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderTaxRecord> getRecordType() {
        return OrderTaxRecord.class;
    }

    /**
     * The column <code>public.order_tax.creation_date</code>.
     */
    public final TableField<OrderTaxRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.order_tax.creator_id</code>.
     */
    public final TableField<OrderTaxRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_tax.last_modification_date</code>.
     */
    public final TableField<OrderTaxRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.order_tax.last_modifier_id</code>.
     */
    public final TableField<OrderTaxRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_tax.owner_id</code>.
     */
    public final TableField<OrderTaxRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_tax.tag</code>.
     */
    public final TableField<OrderTaxRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.order_tax.id</code>.
     */
    public final TableField<OrderTaxRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_tax.amount</code>.
     */
    public final TableField<OrderTaxRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.order_tax.name</code>.
     */
    public final TableField<OrderTaxRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.order_tax.order_id</code>.
     */
    public final TableField<OrderTaxRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_tax.origin_id</code>.
     */
    public final TableField<OrderTaxRecord, UUID> ORIGIN_ID = createField(DSL.name("origin_id"), SQLDataType.UUID.nullable(false), this, "");

    private OrderTax(Name alias, Table<OrderTaxRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderTax(Name alias, Table<OrderTaxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order_tax</code> table reference
     */
    public OrderTax(String alias) {
        this(DSL.name(alias), ORDER_TAX);
    }

    /**
     * Create an aliased <code>public.order_tax</code> table reference
     */
    public OrderTax(Name alias) {
        this(alias, ORDER_TAX);
    }

    /**
     * Create a <code>public.order_tax</code> table reference
     */
    public OrderTax() {
        this(DSL.name("order_tax"), null);
    }

    public <O extends Record> OrderTax(Table<O> child, ForeignKey<O, OrderTaxRecord> key) {
        super(child, key, ORDER_TAX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrderTaxRecord> getPrimaryKey() {
        return Keys.ORDER_TAX_PKEY;
    }

    @Override
    public List<ForeignKey<OrderTaxRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER_TAX__ORDER_TAX_ORDER_ID_FKEY, Keys.ORDER_TAX__ORDER_TAX_ORIGIN_ID_FKEY);
    }

    private transient Order _order;
    private transient Tax _tax;

    /**
     * Get the implicit join path to the <code>public.order</code> table.
     */
    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.ORDER_TAX__ORDER_TAX_ORDER_ID_FKEY);

        return _order;
    }

    /**
     * Get the implicit join path to the <code>public.tax</code> table.
     */
    public Tax tax() {
        if (_tax == null)
            _tax = new Tax(this, Keys.ORDER_TAX__ORDER_TAX_ORIGIN_ID_FKEY);

        return _tax;
    }

    @Override
    public OrderTax as(String alias) {
        return new OrderTax(DSL.name(alias), this);
    }

    @Override
    public OrderTax as(Name alias) {
        return new OrderTax(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderTax rename(String name) {
        return new OrderTax(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderTax rename(Name name) {
        return new OrderTax(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, Double, String, UUID, UUID> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
