/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.PaymentReceiptRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentReceipt extends TableImpl<PaymentReceiptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment_receipt</code>
     */
    public static final PaymentReceipt PAYMENT_RECEIPT = new PaymentReceipt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentReceiptRecord> getRecordType() {
        return PaymentReceiptRecord.class;
    }

    /**
     * The column <code>public.payment_receipt.creation_date</code>.
     */
    public final TableField<PaymentReceiptRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.creator_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.last_modification_date</code>.
     */
    public final TableField<PaymentReceiptRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.last_modifier_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.owner_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.tag</code>.
     */
    public final TableField<PaymentReceiptRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.payment_receipt.id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.object</code>.
     */
    public final TableField<PaymentReceiptRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.state</code>.
     */
    public final TableField<PaymentReceiptRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.reference</code>.
     */
    public final TableField<PaymentReceiptRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.order_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.payment_date</code>.
     */
    public final TableField<PaymentReceiptRecord, LocalDate> PAYMENT_DATE = createField(DSL.name("payment_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.description</code>.
     */
    public final TableField<PaymentReceiptRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.payment_receipt.request_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> REQUEST_ID = createField(DSL.name("request_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.metadata</code>.
     */
    public final TableField<PaymentReceiptRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.amount</code>.
     */
    public final TableField<PaymentReceiptRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.method_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> METHOD_ID = createField(DSL.name("method_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.remitter_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> REMITTER_ID = createField(DSL.name("remitter_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payment_receipt.cashier_id</code>.
     */
    public final TableField<PaymentReceiptRecord, UUID> CASHIER_ID = createField(DSL.name("cashier_id"), SQLDataType.UUID.nullable(false), this, "");

    private PaymentReceipt(Name alias, Table<PaymentReceiptRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentReceipt(Name alias, Table<PaymentReceiptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.payment_receipt</code> table reference
     */
    public PaymentReceipt(String alias) {
        this(DSL.name(alias), PAYMENT_RECEIPT);
    }

    /**
     * Create an aliased <code>public.payment_receipt</code> table reference
     */
    public PaymentReceipt(Name alias) {
        this(alias, PAYMENT_RECEIPT);
    }

    /**
     * Create a <code>public.payment_receipt</code> table reference
     */
    public PaymentReceipt() {
        this(DSL.name("payment_receipt"), null);
    }

    public <O extends Record> PaymentReceipt(Table<O> child, ForeignKey<O, PaymentReceiptRecord> key) {
        super(child, key, PAYMENT_RECEIPT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PaymentReceiptRecord> getPrimaryKey() {
        return Keys.PAYMENT_RECEIPT_PKEY;
    }

    @Override
    public List<ForeignKey<PaymentReceiptRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_ORDER_ID_FKEY, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_REQUEST_ID_FKEY, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_METHOD_ID_FKEY, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_REMITTER_ID_FKEY, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_CASHIER_ID_FKEY);
    }

    private transient Order _order;
    private transient PaymentRequest _paymentRequest;
    private transient PaymentMethod _paymentMethod;
    private transient Person _paymentReceiptRemitterIdFkey;
    private transient Person _paymentReceiptCashierIdFkey;

    /**
     * Get the implicit join path to the <code>public.order</code> table.
     */
    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_ORDER_ID_FKEY);

        return _order;
    }

    /**
     * Get the implicit join path to the <code>public.payment_request</code>
     * table.
     */
    public PaymentRequest paymentRequest() {
        if (_paymentRequest == null)
            _paymentRequest = new PaymentRequest(this, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_REQUEST_ID_FKEY);

        return _paymentRequest;
    }

    /**
     * Get the implicit join path to the <code>public.payment_method</code>
     * table.
     */
    public PaymentMethod paymentMethod() {
        if (_paymentMethod == null)
            _paymentMethod = new PaymentMethod(this, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_METHOD_ID_FKEY);

        return _paymentMethod;
    }

    /**
     * Get the implicit join path to the <code>public.person</code> table, via
     * the <code>payment_receipt_remitter_id_fkey</code> key.
     */
    public Person paymentReceiptRemitterIdFkey() {
        if (_paymentReceiptRemitterIdFkey == null)
            _paymentReceiptRemitterIdFkey = new Person(this, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_REMITTER_ID_FKEY);

        return _paymentReceiptRemitterIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.person</code> table, via
     * the <code>payment_receipt_cashier_id_fkey</code> key.
     */
    public Person paymentReceiptCashierIdFkey() {
        if (_paymentReceiptCashierIdFkey == null)
            _paymentReceiptCashierIdFkey = new Person(this, Keys.PAYMENT_RECEIPT__PAYMENT_RECEIPT_CASHIER_ID_FKEY);

        return _paymentReceiptCashierIdFkey;
    }

    @Override
    public PaymentReceipt as(String alias) {
        return new PaymentReceipt(DSL.name(alias), this);
    }

    @Override
    public PaymentReceipt as(Name alias) {
        return new PaymentReceipt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentReceipt rename(String name) {
        return new PaymentReceipt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentReceipt rename(Name name) {
        return new PaymentReceipt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, String, String, UUID, LocalDate, String, UUID, String, Double, UUID, UUID, UUID> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
