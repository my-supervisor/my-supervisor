/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.PeriodicityRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Periodicity extends TableImpl<PeriodicityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.periodicity</code>
     */
    public static final Periodicity PERIODICITY = new Periodicity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeriodicityRecord> getRecordType() {
        return PeriodicityRecord.class;
    }

    /**
     * The column <code>public.periodicity.creation_date</code>.
     */
    public final TableField<PeriodicityRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.periodicity.creator_id</code>.
     */
    public final TableField<PeriodicityRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.periodicity.last_modification_date</code>.
     */
    public final TableField<PeriodicityRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.periodicity.last_modifier_id</code>.
     */
    public final TableField<PeriodicityRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.periodicity.owner_id</code>.
     */
    public final TableField<PeriodicityRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.periodicity.tag</code>.
     */
    public final TableField<PeriodicityRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.periodicity.id</code>.
     */
    public final TableField<PeriodicityRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.periodicity.close_interval</code>.
     */
    public final TableField<PeriodicityRecord, Boolean> CLOSE_INTERVAL = createField(DSL.name("close_interval"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.periodicity.unit</code>.
     */
    public final TableField<PeriodicityRecord, String> UNIT = createField(DSL.name("unit"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.periodicity.number</code>.
     */
    public final TableField<PeriodicityRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.periodicity.reference</code>.
     */
    public final TableField<PeriodicityRecord, LocalDate> REFERENCE = createField(DSL.name("reference"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Periodicity(Name alias, Table<PeriodicityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Periodicity(Name alias, Table<PeriodicityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.periodicity</code> table reference
     */
    public Periodicity(String alias) {
        this(DSL.name(alias), PERIODICITY);
    }

    /**
     * Create an aliased <code>public.periodicity</code> table reference
     */
    public Periodicity(Name alias) {
        this(alias, PERIODICITY);
    }

    /**
     * Create a <code>public.periodicity</code> table reference
     */
    public Periodicity() {
        this(DSL.name("periodicity"), null);
    }

    public <O extends Record> Periodicity(Table<O> child, ForeignKey<O, PeriodicityRecord> key) {
        super(child, key, PERIODICITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PeriodicityRecord> getPrimaryKey() {
        return Keys.PERIODICITY_PKEY;
    }

    @Override
    public Periodicity as(String alias) {
        return new Periodicity(DSL.name(alias), this);
    }

    @Override
    public Periodicity as(Name alias) {
        return new Periodicity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Periodicity rename(String name) {
        return new Periodicity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Periodicity rename(Name name) {
        return new Periodicity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, Boolean, String, Integer, LocalDate> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
