/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.FormularCaseExpressionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormularCaseExpression extends TableImpl<FormularCaseExpressionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.formular_case_expression</code>
     */
    public static final FormularCaseExpression FORMULAR_CASE_EXPRESSION = new FormularCaseExpression();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FormularCaseExpressionRecord> getRecordType() {
        return FormularCaseExpressionRecord.class;
    }

    /**
     * The column <code>public.formular_case_expression.creation_date</code>.
     */
    public final TableField<FormularCaseExpressionRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.formular_case_expression.creator_id</code>.
     */
    public final TableField<FormularCaseExpressionRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.formular_case_expression.last_modification_date</code>.
     */
    public final TableField<FormularCaseExpressionRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.formular_case_expression.last_modifier_id</code>.
     */
    public final TableField<FormularCaseExpressionRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.formular_case_expression.owner_id</code>.
     */
    public final TableField<FormularCaseExpressionRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.formular_case_expression.tag</code>.
     */
    public final TableField<FormularCaseExpressionRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.formular_case_expression.id</code>.
     */
    public final TableField<FormularCaseExpressionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    private FormularCaseExpression(Name alias, Table<FormularCaseExpressionRecord> aliased) {
        this(alias, aliased, null);
    }

    private FormularCaseExpression(Name alias, Table<FormularCaseExpressionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.formular_case_expression</code> table
     * reference
     */
    public FormularCaseExpression(String alias) {
        this(DSL.name(alias), FORMULAR_CASE_EXPRESSION);
    }

    /**
     * Create an aliased <code>public.formular_case_expression</code> table
     * reference
     */
    public FormularCaseExpression(Name alias) {
        this(alias, FORMULAR_CASE_EXPRESSION);
    }

    /**
     * Create a <code>public.formular_case_expression</code> table reference
     */
    public FormularCaseExpression() {
        this(DSL.name("formular_case_expression"), null);
    }

    public <O extends Record> FormularCaseExpression(Table<O> child, ForeignKey<O, FormularCaseExpressionRecord> key) {
        super(child, key, FORMULAR_CASE_EXPRESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<FormularCaseExpressionRecord> getPrimaryKey() {
        return Keys.FORMULAR_CASE_EXPRESSION_PKEY;
    }

    @Override
    public List<ForeignKey<FormularCaseExpressionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FORMULAR_CASE_EXPRESSION__FORMULAR_CASE_EXPRESSION_ID_FKEY);
    }

    private transient FormularExpression _formularExpression;

    /**
     * Get the implicit join path to the <code>public.formular_expression</code>
     * table.
     */
    public FormularExpression formularExpression() {
        if (_formularExpression == null)
            _formularExpression = new FormularExpression(this, Keys.FORMULAR_CASE_EXPRESSION__FORMULAR_CASE_EXPRESSION_ID_FKEY);

        return _formularExpression;
    }

    @Override
    public FormularCaseExpression as(String alias) {
        return new FormularCaseExpression(DSL.name(alias), this);
    }

    @Override
    public FormularCaseExpression as(Name alias) {
        return new FormularCaseExpression(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FormularCaseExpression rename(String name) {
        return new FormularCaseExpression(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FormularCaseExpression rename(Name name) {
        return new FormularCaseExpression(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
