/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.PlanFeatureRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanFeature extends TableImpl<PlanFeatureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.plan_feature</code>
     */
    public static final PlanFeature PLAN_FEATURE = new PlanFeature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanFeatureRecord> getRecordType() {
        return PlanFeatureRecord.class;
    }

    /**
     * The column <code>public.plan_feature.creation_date</code>.
     */
    public final TableField<PlanFeatureRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.creator_id</code>.
     */
    public final TableField<PlanFeatureRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.last_modification_date</code>.
     */
    public final TableField<PlanFeatureRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.last_modifier_id</code>.
     */
    public final TableField<PlanFeatureRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.owner_id</code>.
     */
    public final TableField<PlanFeatureRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.tag</code>.
     */
    public final TableField<PlanFeatureRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.plan_feature.id</code>.
     */
    public final TableField<PlanFeatureRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.description</code>.
     */
    public final TableField<PlanFeatureRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.plan_feature.name</code>.
     */
    public final TableField<PlanFeatureRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.no</code>.
     */
    public final TableField<PlanFeatureRecord, Integer> NO = createField(DSL.name("no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.plan_id</code>.
     */
    public final TableField<PlanFeatureRecord, UUID> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.enabled</code>.
     */
    public final TableField<PlanFeatureRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.plan_feature.basic</code>.
     */
    public final TableField<PlanFeatureRecord, Boolean> BASIC = createField(DSL.name("basic"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private PlanFeature(Name alias, Table<PlanFeatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanFeature(Name alias, Table<PlanFeatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.plan_feature</code> table reference
     */
    public PlanFeature(String alias) {
        this(DSL.name(alias), PLAN_FEATURE);
    }

    /**
     * Create an aliased <code>public.plan_feature</code> table reference
     */
    public PlanFeature(Name alias) {
        this(alias, PLAN_FEATURE);
    }

    /**
     * Create a <code>public.plan_feature</code> table reference
     */
    public PlanFeature() {
        this(DSL.name("plan_feature"), null);
    }

    public <O extends Record> PlanFeature(Table<O> child, ForeignKey<O, PlanFeatureRecord> key) {
        super(child, key, PLAN_FEATURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PlanFeatureRecord> getPrimaryKey() {
        return Keys.PLAN_FEATURE_PKEY;
    }

    @Override
    public List<ForeignKey<PlanFeatureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLAN_FEATURE__PLAN_FEATURE_PLAN_ID_FKEY);
    }

    private transient Plan _plan;

    /**
     * Get the implicit join path to the <code>public.plan</code> table.
     */
    public Plan plan() {
        if (_plan == null)
            _plan = new Plan(this, Keys.PLAN_FEATURE__PLAN_FEATURE_PLAN_ID_FKEY);

        return _plan;
    }

    @Override
    public PlanFeature as(String alias) {
        return new PlanFeature(DSL.name(alias), this);
    }

    @Override
    public PlanFeature as(Name alias) {
        return new PlanFeature(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanFeature rename(String name) {
        return new PlanFeature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanFeature rename(Name name) {
        return new PlanFeature(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, String, Integer, UUID, Boolean, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
