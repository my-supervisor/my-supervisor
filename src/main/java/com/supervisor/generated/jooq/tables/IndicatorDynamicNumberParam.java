/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.IndicatorDynamicNumberParamRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorDynamicNumberParam extends TableImpl<IndicatorDynamicNumberParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.indicator_dynamic_number_param</code>
     */
    public static final IndicatorDynamicNumberParam INDICATOR_DYNAMIC_NUMBER_PARAM = new IndicatorDynamicNumberParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorDynamicNumberParamRecord> getRecordType() {
        return IndicatorDynamicNumberParamRecord.class;
    }

    /**
     * The column
     * <code>public.indicator_dynamic_number_param.creation_date</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.indicator_dynamic_number_param.creator_id</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.indicator_dynamic_number_param.last_modification_date</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>public.indicator_dynamic_number_param.last_modifier_id</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_dynamic_number_param.owner_id</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_dynamic_number_param.tag</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.indicator_dynamic_number_param.id</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_dynamic_number_param.precision</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, Integer> PRECISION = createField(DSL.name("precision"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.indicator_dynamic_number_param.apply_thousands_separator</code>.
     */
    public final TableField<IndicatorDynamicNumberParamRecord, Boolean> APPLY_THOUSANDS_SEPARATOR = createField(DSL.name("apply_thousands_separator"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private IndicatorDynamicNumberParam(Name alias, Table<IndicatorDynamicNumberParamRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorDynamicNumberParam(Name alias, Table<IndicatorDynamicNumberParamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.indicator_dynamic_number_param</code>
     * table reference
     */
    public IndicatorDynamicNumberParam(String alias) {
        this(DSL.name(alias), INDICATOR_DYNAMIC_NUMBER_PARAM);
    }

    /**
     * Create an aliased <code>public.indicator_dynamic_number_param</code>
     * table reference
     */
    public IndicatorDynamicNumberParam(Name alias) {
        this(alias, INDICATOR_DYNAMIC_NUMBER_PARAM);
    }

    /**
     * Create a <code>public.indicator_dynamic_number_param</code> table
     * reference
     */
    public IndicatorDynamicNumberParam() {
        this(DSL.name("indicator_dynamic_number_param"), null);
    }

    public <O extends Record> IndicatorDynamicNumberParam(Table<O> child, ForeignKey<O, IndicatorDynamicNumberParamRecord> key) {
        super(child, key, INDICATOR_DYNAMIC_NUMBER_PARAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IndicatorDynamicNumberParamRecord> getPrimaryKey() {
        return Keys.INDICATOR_DYNAMIC_NUMBER_PARAM_PKEY;
    }

    @Override
    public List<ForeignKey<IndicatorDynamicNumberParamRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INDICATOR_DYNAMIC_NUMBER_PARAM__INDICATOR_DYNAMIC_NUMBER_PARAM_ID_FKEY);
    }

    private transient IndicatorDynamicParam _indicatorDynamicParam;

    /**
     * Get the implicit join path to the
     * <code>public.indicator_dynamic_param</code> table.
     */
    public IndicatorDynamicParam indicatorDynamicParam() {
        if (_indicatorDynamicParam == null)
            _indicatorDynamicParam = new IndicatorDynamicParam(this, Keys.INDICATOR_DYNAMIC_NUMBER_PARAM__INDICATOR_DYNAMIC_NUMBER_PARAM_ID_FKEY);

        return _indicatorDynamicParam;
    }

    @Override
    public IndicatorDynamicNumberParam as(String alias) {
        return new IndicatorDynamicNumberParam(DSL.name(alias), this);
    }

    @Override
    public IndicatorDynamicNumberParam as(Name alias) {
        return new IndicatorDynamicNumberParam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorDynamicNumberParam rename(String name) {
        return new IndicatorDynamicNumberParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorDynamicNumberParam rename(Name name) {
        return new IndicatorDynamicNumberParam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, Integer, Boolean> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
