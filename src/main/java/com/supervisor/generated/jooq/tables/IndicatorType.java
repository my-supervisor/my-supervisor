/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.IndicatorTypeRecord;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorType extends TableImpl<IndicatorTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.indicator_type</code>
     */
    public static final IndicatorType INDICATOR_TYPE = new IndicatorType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorTypeRecord> getRecordType() {
        return IndicatorTypeRecord.class;
    }

    /**
     * The column <code>public.indicator_type.creation_date</code>.
     */
    public final TableField<IndicatorTypeRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.creator_id</code>.
     */
    public final TableField<IndicatorTypeRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.last_modification_date</code>.
     */
    public final TableField<IndicatorTypeRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.last_modifier_id</code>.
     */
    public final TableField<IndicatorTypeRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.owner_id</code>.
     */
    public final TableField<IndicatorTypeRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.tag</code>.
     */
    public final TableField<IndicatorTypeRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.indicator_type.id</code>.
     */
    public final TableField<IndicatorTypeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.description</code>.
     */
    public final TableField<IndicatorTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.name</code>.
     */
    public final TableField<IndicatorTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.default_size_x</code>.
     */
    public final TableField<IndicatorTypeRecord, Integer> DEFAULT_SIZE_X = createField(DSL.name("default_size_x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.default_size_y</code>.
     */
    public final TableField<IndicatorTypeRecord, Integer> DEFAULT_SIZE_Y = createField(DSL.name("default_size_y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.indicator_type.short_name</code>.
     */
    public final TableField<IndicatorTypeRecord, String> SHORT_NAME = createField(DSL.name("short_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    private IndicatorType(Name alias, Table<IndicatorTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorType(Name alias, Table<IndicatorTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.indicator_type</code> table reference
     */
    public IndicatorType(String alias) {
        this(DSL.name(alias), INDICATOR_TYPE);
    }

    /**
     * Create an aliased <code>public.indicator_type</code> table reference
     */
    public IndicatorType(Name alias) {
        this(alias, INDICATOR_TYPE);
    }

    /**
     * Create a <code>public.indicator_type</code> table reference
     */
    public IndicatorType() {
        this(DSL.name("indicator_type"), null);
    }

    public <O extends Record> IndicatorType(Table<O> child, ForeignKey<O, IndicatorTypeRecord> key) {
        super(child, key, INDICATOR_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IndicatorTypeRecord> getPrimaryKey() {
        return Keys.INDICATOR_TYPE_PKEY;
    }

    @Override
    public IndicatorType as(String alias) {
        return new IndicatorType(DSL.name(alias), this);
    }

    @Override
    public IndicatorType as(Name alias) {
        return new IndicatorType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorType rename(String name) {
        return new IndicatorType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorType rename(Name name) {
        return new IndicatorType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, String, Integer, Integer, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
