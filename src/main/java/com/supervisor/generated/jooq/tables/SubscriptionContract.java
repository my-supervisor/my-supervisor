/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.SubscriptionContractRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionContract extends TableImpl<SubscriptionContractRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subscription_contract</code>
     */
    public static final SubscriptionContract SUBSCRIPTION_CONTRACT = new SubscriptionContract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionContractRecord> getRecordType() {
        return SubscriptionContractRecord.class;
    }

    /**
     * The column <code>public.subscription_contract.creation_date</code>.
     */
    public final TableField<SubscriptionContractRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.creator_id</code>.
     */
    public final TableField<SubscriptionContractRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.subscription_contract.last_modification_date</code>.
     */
    public final TableField<SubscriptionContractRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.last_modifier_id</code>.
     */
    public final TableField<SubscriptionContractRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.owner_id</code>.
     */
    public final TableField<SubscriptionContractRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.tag</code>.
     */
    public final TableField<SubscriptionContractRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.subscription_contract.id</code>.
     */
    public final TableField<SubscriptionContractRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.invoice_id</code>.
     */
    public final TableField<SubscriptionContractRecord, UUID> INVOICE_ID = createField(DSL.name("invoice_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.subscription_contract.subscriber_id</code>.
     */
    public final TableField<SubscriptionContractRecord, UUID> SUBSCRIBER_ID = createField(DSL.name("subscriber_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.begin_date</code>.
     */
    public final TableField<SubscriptionContractRecord, LocalDate> BEGIN_DATE = createField(DSL.name("begin_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.end_date</code>.
     */
    public final TableField<SubscriptionContractRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.subscription_contract.purchase_order_id</code>.
     */
    public final TableField<SubscriptionContractRecord, UUID> PURCHASE_ORDER_ID = createField(DSL.name("purchase_order_id"), SQLDataType.UUID.nullable(false), this, "");

    private SubscriptionContract(Name alias, Table<SubscriptionContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubscriptionContract(Name alias, Table<SubscriptionContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.subscription_contract</code> table
     * reference
     */
    public SubscriptionContract(String alias) {
        this(DSL.name(alias), SUBSCRIPTION_CONTRACT);
    }

    /**
     * Create an aliased <code>public.subscription_contract</code> table
     * reference
     */
    public SubscriptionContract(Name alias) {
        this(alias, SUBSCRIPTION_CONTRACT);
    }

    /**
     * Create a <code>public.subscription_contract</code> table reference
     */
    public SubscriptionContract() {
        this(DSL.name("subscription_contract"), null);
    }

    public <O extends Record> SubscriptionContract(Table<O> child, ForeignKey<O, SubscriptionContractRecord> key) {
        super(child, key, SUBSCRIPTION_CONTRACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SubscriptionContractRecord> getPrimaryKey() {
        return Keys.SUBSCRIPTION_CONTRACT_PKEY;
    }

    @Override
    public List<ForeignKey<SubscriptionContractRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_INVOICE_ID_FKEY, Keys.SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_SUBSCRIBER_ID_FKEY, Keys.SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_PURCHASE_ORDER_ID_FKEY);
    }

    private transient Invoice _invoice;
    private transient Person _person;
    private transient PurchaseOrder _purchaseOrder;

    /**
     * Get the implicit join path to the <code>public.invoice</code> table.
     */
    public Invoice invoice() {
        if (_invoice == null)
            _invoice = new Invoice(this, Keys.SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_INVOICE_ID_FKEY);

        return _invoice;
    }

    /**
     * Get the implicit join path to the <code>public.person</code> table.
     */
    public Person person() {
        if (_person == null)
            _person = new Person(this, Keys.SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_SUBSCRIBER_ID_FKEY);

        return _person;
    }

    /**
     * Get the implicit join path to the <code>public.purchase_order</code>
     * table.
     */
    public PurchaseOrder purchaseOrder() {
        if (_purchaseOrder == null)
            _purchaseOrder = new PurchaseOrder(this, Keys.SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_PURCHASE_ORDER_ID_FKEY);

        return _purchaseOrder;
    }

    @Override
    public SubscriptionContract as(String alias) {
        return new SubscriptionContract(DSL.name(alias), this);
    }

    @Override
    public SubscriptionContract as(Name alias) {
        return new SubscriptionContract(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionContract rename(String name) {
        return new SubscriptionContract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionContract rename(Name name) {
        return new SubscriptionContract(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID, UUID, LocalDate, LocalDate, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
