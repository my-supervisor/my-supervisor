/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.ListDataFieldSourceSharedRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListDataFieldSourceShared extends TableImpl<ListDataFieldSourceSharedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.list_data_field_source_shared</code>
     */
    public static final ListDataFieldSourceShared LIST_DATA_FIELD_SOURCE_SHARED = new ListDataFieldSourceShared();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListDataFieldSourceSharedRecord> getRecordType() {
        return ListDataFieldSourceSharedRecord.class;
    }

    /**
     * The column
     * <code>public.list_data_field_source_shared.creation_date</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.list_data_field_source_shared.creator_id</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.list_data_field_source_shared.last_modification_date</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>public.list_data_field_source_shared.last_modifier_id</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.list_data_field_source_shared.owner_id</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.list_data_field_source_shared.tag</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.list_data_field_source_shared.id</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.list_data_field_source_shared.template_id</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, UUID> TEMPLATE_ID = createField(DSL.name("template_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.list_data_field_source_shared.activity_id</code>.
     */
    public final TableField<ListDataFieldSourceSharedRecord, UUID> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.UUID.nullable(false), this, "");

    private ListDataFieldSourceShared(Name alias, Table<ListDataFieldSourceSharedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListDataFieldSourceShared(Name alias, Table<ListDataFieldSourceSharedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.list_data_field_source_shared</code> table
     * reference
     */
    public ListDataFieldSourceShared(String alias) {
        this(DSL.name(alias), LIST_DATA_FIELD_SOURCE_SHARED);
    }

    /**
     * Create an aliased <code>public.list_data_field_source_shared</code> table
     * reference
     */
    public ListDataFieldSourceShared(Name alias) {
        this(alias, LIST_DATA_FIELD_SOURCE_SHARED);
    }

    /**
     * Create a <code>public.list_data_field_source_shared</code> table
     * reference
     */
    public ListDataFieldSourceShared() {
        this(DSL.name("list_data_field_source_shared"), null);
    }

    public <O extends Record> ListDataFieldSourceShared(Table<O> child, ForeignKey<O, ListDataFieldSourceSharedRecord> key) {
        super(child, key, LIST_DATA_FIELD_SOURCE_SHARED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ListDataFieldSourceSharedRecord> getPrimaryKey() {
        return Keys.LIST_DATA_FIELD_SOURCE_SHARED_PKEY;
    }

    @Override
    public List<ForeignKey<ListDataFieldSourceSharedRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_ID_FKEY, Keys.LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_TEMPLATE_ID_FKEY, Keys.LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_ACTIVITY_ID_FKEY);
    }

    private transient ListDataFieldSource _listDataFieldSourceSharedIdFkey;
    private transient ListDataFieldSource _listDataFieldSourceSharedTemplateIdFkey;
    private transient Activity _activity;

    /**
     * Get the implicit join path to the
     * <code>public.list_data_field_source</code> table, via the
     * <code>list_data_field_source_shared_id_fkey</code> key.
     */
    public ListDataFieldSource listDataFieldSourceSharedIdFkey() {
        if (_listDataFieldSourceSharedIdFkey == null)
            _listDataFieldSourceSharedIdFkey = new ListDataFieldSource(this, Keys.LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_ID_FKEY);

        return _listDataFieldSourceSharedIdFkey;
    }

    /**
     * Get the implicit join path to the
     * <code>public.list_data_field_source</code> table, via the
     * <code>list_data_field_source_shared_template_id_fkey</code> key.
     */
    public ListDataFieldSource listDataFieldSourceSharedTemplateIdFkey() {
        if (_listDataFieldSourceSharedTemplateIdFkey == null)
            _listDataFieldSourceSharedTemplateIdFkey = new ListDataFieldSource(this, Keys.LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_TEMPLATE_ID_FKEY);

        return _listDataFieldSourceSharedTemplateIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.activity</code> table.
     */
    public Activity activity() {
        if (_activity == null)
            _activity = new Activity(this, Keys.LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_ACTIVITY_ID_FKEY);

        return _activity;
    }

    @Override
    public ListDataFieldSourceShared as(String alias) {
        return new ListDataFieldSourceShared(DSL.name(alias), this);
    }

    @Override
    public ListDataFieldSourceShared as(Name alias) {
        return new ListDataFieldSourceShared(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListDataFieldSourceShared rename(String name) {
        return new ListDataFieldSourceShared(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListDataFieldSourceShared rename(Name name) {
        return new ListDataFieldSourceShared(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, UUID, UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
