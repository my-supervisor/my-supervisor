/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq.tables;


import com.supervisor.generated.jooq.Keys;
import com.supervisor.generated.jooq.Public;
import com.supervisor.generated.jooq.tables.records.DataLinkRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataLink extends TableImpl<DataLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_link</code>
     */
    public static final DataLink DATA_LINK = new DataLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataLinkRecord> getRecordType() {
        return DataLinkRecord.class;
    }

    /**
     * The column <code>public.data_link.creation_date</code>.
     */
    public final TableField<DataLinkRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_link.creator_id</code>.
     */
    public final TableField<DataLinkRecord, UUID> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_link.last_modification_date</code>.
     */
    public final TableField<DataLinkRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_link.last_modifier_id</code>.
     */
    public final TableField<DataLinkRecord, UUID> LAST_MODIFIER_ID = createField(DSL.name("last_modifier_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_link.owner_id</code>.
     */
    public final TableField<DataLinkRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_link.tag</code>.
     */
    public final TableField<DataLinkRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.data_link.id</code>.
     */
    public final TableField<DataLinkRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_link.name</code>.
     */
    public final TableField<DataLinkRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.data_link.data_domain_definition</code>.
     */
    public final TableField<DataLinkRecord, String> DATA_DOMAIN_DEFINITION = createField(DSL.name("data_domain_definition"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.data_link.indicator_id</code>.
     */
    public final TableField<DataLinkRecord, UUID> INDICATOR_ID = createField(DSL.name("indicator_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.data_link.active</code>.
     */
    public final TableField<DataLinkRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.data_link.model_id</code>.
     */
    public final TableField<DataLinkRecord, UUID> MODEL_ID = createField(DSL.name("model_id"), SQLDataType.UUID.nullable(false), this, "");

    private DataLink(Name alias, Table<DataLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataLink(Name alias, Table<DataLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.data_link</code> table reference
     */
    public DataLink(String alias) {
        this(DSL.name(alias), DATA_LINK);
    }

    /**
     * Create an aliased <code>public.data_link</code> table reference
     */
    public DataLink(Name alias) {
        this(alias, DATA_LINK);
    }

    /**
     * Create a <code>public.data_link</code> table reference
     */
    public DataLink() {
        this(DSL.name("data_link"), null);
    }

    public <O extends Record> DataLink(Table<O> child, ForeignKey<O, DataLinkRecord> key) {
        super(child, key, DATA_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DataLinkRecord> getPrimaryKey() {
        return Keys.DATA_LINK_PKEY;
    }

    @Override
    public List<ForeignKey<DataLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DATA_LINK__DATA_LINK_INDICATOR_ID_FKEY, Keys.DATA_LINK__DATA_LINK_MODEL_ID_FKEY);
    }

    private transient IndicatorGeneralSetting _indicatorGeneralSetting;
    private transient DataModel _dataModel;

    /**
     * Get the implicit join path to the
     * <code>public.indicator_general_setting</code> table.
     */
    public IndicatorGeneralSetting indicatorGeneralSetting() {
        if (_indicatorGeneralSetting == null)
            _indicatorGeneralSetting = new IndicatorGeneralSetting(this, Keys.DATA_LINK__DATA_LINK_INDICATOR_ID_FKEY);

        return _indicatorGeneralSetting;
    }

    /**
     * Get the implicit join path to the <code>public.data_model</code> table.
     */
    public DataModel dataModel() {
        if (_dataModel == null)
            _dataModel = new DataModel(this, Keys.DATA_LINK__DATA_LINK_MODEL_ID_FKEY);

        return _dataModel;
    }

    @Override
    public DataLink as(String alias) {
        return new DataLink(DSL.name(alias), this);
    }

    @Override
    public DataLink as(Name alias) {
        return new DataLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataLink rename(String name) {
        return new DataLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataLink rename(Name name) {
        return new DataLink(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<LocalDateTime, UUID, LocalDateTime, UUID, UUID, String, UUID, String, String, UUID, Boolean, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
