/*
 * This file is generated by jOOQ.
 */
package com.supervisor.generated.jooq;


import com.supervisor.generated.jooq.tables.Access;
import com.supervisor.generated.jooq.tables.AccessParam;
import com.supervisor.generated.jooq.tables.Activity;
import com.supervisor.generated.jooq.tables.ActivityParam;
import com.supervisor.generated.jooq.tables.ActivityTemplateLike;
import com.supervisor.generated.jooq.tables.ActivityTemplatePublished;
import com.supervisor.generated.jooq.tables.ActivityTemplateRelease;
import com.supervisor.generated.jooq.tables.ActivityTemplateSubscription;
import com.supervisor.generated.jooq.tables.ActivityTemplateView;
import com.supervisor.generated.jooq.tables.Address;
import com.supervisor.generated.jooq.tables.AggregatedModel;
import com.supervisor.generated.jooq.tables.AggregatedModelShared;
import com.supervisor.generated.jooq.tables.BillingAddress;
import com.supervisor.generated.jooq.tables.ChartCamembertSetting;
import com.supervisor.generated.jooq.tables.Country;
import com.supervisor.generated.jooq.tables.Currency;
import com.supervisor.generated.jooq.tables.DataField;
import com.supervisor.generated.jooq.tables.DataFieldExpressionArg;
import com.supervisor.generated.jooq.tables.DataFieldOfSheet;
import com.supervisor.generated.jooq.tables.DataLink;
import com.supervisor.generated.jooq.tables.DataLinkParam;
import com.supervisor.generated.jooq.tables.DataLinkShared;
import com.supervisor.generated.jooq.tables.DataModel;
import com.supervisor.generated.jooq.tables.DataSheet;
import com.supervisor.generated.jooq.tables.DataSheetModel;
import com.supervisor.generated.jooq.tables.DataSheetShared;
import com.supervisor.generated.jooq.tables.Databasechangeloglock;
import com.supervisor.generated.jooq.tables.DynamicTable_2Col;
import com.supervisor.generated.jooq.tables.EditableDataField;
import com.supervisor.generated.jooq.tables.Event;
import com.supervisor.generated.jooq.tables.ExpressionArg;
import com.supervisor.generated.jooq.tables.ExpressionValueArg;
import com.supervisor.generated.jooq.tables.FormularCaseExpression;
import com.supervisor.generated.jooq.tables.FormularCondition;
import com.supervisor.generated.jooq.tables.FormularDataField;
import com.supervisor.generated.jooq.tables.FormularExpression;
import com.supervisor.generated.jooq.tables.FormularExtendedToModelSource;
import com.supervisor.generated.jooq.tables.FormularExtendedToParentSource;
import com.supervisor.generated.jooq.tables.FormularSimpleExpression;
import com.supervisor.generated.jooq.tables.GaugeSetting;
import com.supervisor.generated.jooq.tables.GaugeZone;
import com.supervisor.generated.jooq.tables.GoalNumberSetting;
import com.supervisor.generated.jooq.tables.IndicatorDynamicNumberParam;
import com.supervisor.generated.jooq.tables.IndicatorDynamicParam;
import com.supervisor.generated.jooq.tables.IndicatorDynamicStringParam;
import com.supervisor.generated.jooq.tables.IndicatorGeneralSetting;
import com.supervisor.generated.jooq.tables.IndicatorStaticParam;
import com.supervisor.generated.jooq.tables.IndicatorType;
import com.supervisor.generated.jooq.tables.IndicatorTypeParam;
import com.supervisor.generated.jooq.tables.Invoice;
import com.supervisor.generated.jooq.tables.Language;
import com.supervisor.generated.jooq.tables.ListDataFieldSource;
import com.supervisor.generated.jooq.tables.ListDataFieldSourceShared;
import com.supervisor.generated.jooq.tables.MappedDataField;
import com.supervisor.generated.jooq.tables.ModelFilter;
import com.supervisor.generated.jooq.tables.ModelFilterCondition;
import com.supervisor.generated.jooq.tables.NumberOrientedSetting;
import com.supervisor.generated.jooq.tables.Order;
import com.supervisor.generated.jooq.tables.OrderLine;
import com.supervisor.generated.jooq.tables.OrderTax;
import com.supervisor.generated.jooq.tables.ParamDataField;
import com.supervisor.generated.jooq.tables.PaymentMethod;
import com.supervisor.generated.jooq.tables.PaymentReceipt;
import com.supervisor.generated.jooq.tables.PaymentRequest;
import com.supervisor.generated.jooq.tables.Periodicity;
import com.supervisor.generated.jooq.tables.Person;
import com.supervisor.generated.jooq.tables.Plan;
import com.supervisor.generated.jooq.tables.PlanFeature;
import com.supervisor.generated.jooq.tables.PlanSubscriptionContract;
import com.supervisor.generated.jooq.tables.PlannedTask;
import com.supervisor.generated.jooq.tables.Product;
import com.supervisor.generated.jooq.tables.ProductCatalog;
import com.supervisor.generated.jooq.tables.Profile;
import com.supervisor.generated.jooq.tables.ProfileAccess;
import com.supervisor.generated.jooq.tables.ProfileAccessParam;
import com.supervisor.generated.jooq.tables.PurchaseOrder;
import com.supervisor.generated.jooq.tables.Recordable;
import com.supervisor.generated.jooq.tables.RegistrationRequest;
import com.supervisor.generated.jooq.tables.Sequence;
import com.supervisor.generated.jooq.tables.SharedResource;
import com.supervisor.generated.jooq.tables.SubscriptionContract;
import com.supervisor.generated.jooq.tables.Tax;
import com.supervisor.generated.jooq.tables.User;
import com.supervisor.generated.jooq.tables.ValueExpressionArg;
import com.supervisor.generated.jooq.tables.WhenCase;
import com.supervisor.generated.jooq.tables.records.AccessParamRecord;
import com.supervisor.generated.jooq.tables.records.AccessRecord;
import com.supervisor.generated.jooq.tables.records.ActivityParamRecord;
import com.supervisor.generated.jooq.tables.records.ActivityRecord;
import com.supervisor.generated.jooq.tables.records.ActivityTemplateLikeRecord;
import com.supervisor.generated.jooq.tables.records.ActivityTemplatePublishedRecord;
import com.supervisor.generated.jooq.tables.records.ActivityTemplateReleaseRecord;
import com.supervisor.generated.jooq.tables.records.ActivityTemplateSubscriptionRecord;
import com.supervisor.generated.jooq.tables.records.ActivityTemplateViewRecord;
import com.supervisor.generated.jooq.tables.records.AddressRecord;
import com.supervisor.generated.jooq.tables.records.AggregatedModelRecord;
import com.supervisor.generated.jooq.tables.records.AggregatedModelSharedRecord;
import com.supervisor.generated.jooq.tables.records.BillingAddressRecord;
import com.supervisor.generated.jooq.tables.records.ChartCamembertSettingRecord;
import com.supervisor.generated.jooq.tables.records.CountryRecord;
import com.supervisor.generated.jooq.tables.records.CurrencyRecord;
import com.supervisor.generated.jooq.tables.records.DataFieldExpressionArgRecord;
import com.supervisor.generated.jooq.tables.records.DataFieldOfSheetRecord;
import com.supervisor.generated.jooq.tables.records.DataFieldRecord;
import com.supervisor.generated.jooq.tables.records.DataLinkParamRecord;
import com.supervisor.generated.jooq.tables.records.DataLinkRecord;
import com.supervisor.generated.jooq.tables.records.DataLinkSharedRecord;
import com.supervisor.generated.jooq.tables.records.DataModelRecord;
import com.supervisor.generated.jooq.tables.records.DataSheetModelRecord;
import com.supervisor.generated.jooq.tables.records.DataSheetRecord;
import com.supervisor.generated.jooq.tables.records.DataSheetSharedRecord;
import com.supervisor.generated.jooq.tables.records.DatabasechangeloglockRecord;
import com.supervisor.generated.jooq.tables.records.DynamicTable_2ColRecord;
import com.supervisor.generated.jooq.tables.records.EditableDataFieldRecord;
import com.supervisor.generated.jooq.tables.records.EventRecord;
import com.supervisor.generated.jooq.tables.records.ExpressionArgRecord;
import com.supervisor.generated.jooq.tables.records.ExpressionValueArgRecord;
import com.supervisor.generated.jooq.tables.records.FormularCaseExpressionRecord;
import com.supervisor.generated.jooq.tables.records.FormularConditionRecord;
import com.supervisor.generated.jooq.tables.records.FormularDataFieldRecord;
import com.supervisor.generated.jooq.tables.records.FormularExpressionRecord;
import com.supervisor.generated.jooq.tables.records.FormularExtendedToModelSourceRecord;
import com.supervisor.generated.jooq.tables.records.FormularExtendedToParentSourceRecord;
import com.supervisor.generated.jooq.tables.records.FormularSimpleExpressionRecord;
import com.supervisor.generated.jooq.tables.records.GaugeSettingRecord;
import com.supervisor.generated.jooq.tables.records.GaugeZoneRecord;
import com.supervisor.generated.jooq.tables.records.GoalNumberSettingRecord;
import com.supervisor.generated.jooq.tables.records.IndicatorDynamicNumberParamRecord;
import com.supervisor.generated.jooq.tables.records.IndicatorDynamicParamRecord;
import com.supervisor.generated.jooq.tables.records.IndicatorDynamicStringParamRecord;
import com.supervisor.generated.jooq.tables.records.IndicatorGeneralSettingRecord;
import com.supervisor.generated.jooq.tables.records.IndicatorStaticParamRecord;
import com.supervisor.generated.jooq.tables.records.IndicatorTypeParamRecord;
import com.supervisor.generated.jooq.tables.records.IndicatorTypeRecord;
import com.supervisor.generated.jooq.tables.records.InvoiceRecord;
import com.supervisor.generated.jooq.tables.records.LanguageRecord;
import com.supervisor.generated.jooq.tables.records.ListDataFieldSourceRecord;
import com.supervisor.generated.jooq.tables.records.ListDataFieldSourceSharedRecord;
import com.supervisor.generated.jooq.tables.records.MappedDataFieldRecord;
import com.supervisor.generated.jooq.tables.records.ModelFilterConditionRecord;
import com.supervisor.generated.jooq.tables.records.ModelFilterRecord;
import com.supervisor.generated.jooq.tables.records.NumberOrientedSettingRecord;
import com.supervisor.generated.jooq.tables.records.OrderLineRecord;
import com.supervisor.generated.jooq.tables.records.OrderRecord;
import com.supervisor.generated.jooq.tables.records.OrderTaxRecord;
import com.supervisor.generated.jooq.tables.records.ParamDataFieldRecord;
import com.supervisor.generated.jooq.tables.records.PaymentMethodRecord;
import com.supervisor.generated.jooq.tables.records.PaymentReceiptRecord;
import com.supervisor.generated.jooq.tables.records.PaymentRequestRecord;
import com.supervisor.generated.jooq.tables.records.PeriodicityRecord;
import com.supervisor.generated.jooq.tables.records.PersonRecord;
import com.supervisor.generated.jooq.tables.records.PlanFeatureRecord;
import com.supervisor.generated.jooq.tables.records.PlanRecord;
import com.supervisor.generated.jooq.tables.records.PlanSubscriptionContractRecord;
import com.supervisor.generated.jooq.tables.records.PlannedTaskRecord;
import com.supervisor.generated.jooq.tables.records.ProductCatalogRecord;
import com.supervisor.generated.jooq.tables.records.ProductRecord;
import com.supervisor.generated.jooq.tables.records.ProfileAccessParamRecord;
import com.supervisor.generated.jooq.tables.records.ProfileAccessRecord;
import com.supervisor.generated.jooq.tables.records.ProfileRecord;
import com.supervisor.generated.jooq.tables.records.PurchaseOrderRecord;
import com.supervisor.generated.jooq.tables.records.RecordableRecord;
import com.supervisor.generated.jooq.tables.records.RegistrationRequestRecord;
import com.supervisor.generated.jooq.tables.records.SequenceRecord;
import com.supervisor.generated.jooq.tables.records.SharedResourceRecord;
import com.supervisor.generated.jooq.tables.records.SubscriptionContractRecord;
import com.supervisor.generated.jooq.tables.records.TaxRecord;
import com.supervisor.generated.jooq.tables.records.UserRecord;
import com.supervisor.generated.jooq.tables.records.ValueExpressionArgRecord;
import com.supervisor.generated.jooq.tables.records.WhenCaseRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccessRecord> ACCESS_PKEY = Internal.createUniqueKey(Access.ACCESS, DSL.name("access_pkey"), new TableField[] { Access.ACCESS.ID }, true);
    public static final UniqueKey<AccessParamRecord> ACCESS_PARAM_PKEY = Internal.createUniqueKey(AccessParam.ACCESS_PARAM, DSL.name("access_param_pkey"), new TableField[] { AccessParam.ACCESS_PARAM.ID }, true);
    public static final UniqueKey<ActivityRecord> ACTIVITY_PKEY = Internal.createUniqueKey(Activity.ACTIVITY, DSL.name("activity_pkey"), new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final UniqueKey<ActivityParamRecord> ACTIVITY_PARAM_PKEY = Internal.createUniqueKey(ActivityParam.ACTIVITY_PARAM, DSL.name("activity_param_pkey"), new TableField[] { ActivityParam.ACTIVITY_PARAM.ID }, true);
    public static final UniqueKey<ActivityTemplateLikeRecord> ACTIVITY_TEMPLATE_LIKE_PKEY = Internal.createUniqueKey(ActivityTemplateLike.ACTIVITY_TEMPLATE_LIKE, DSL.name("activity_template_like_pkey"), new TableField[] { ActivityTemplateLike.ACTIVITY_TEMPLATE_LIKE.ID }, true);
    public static final UniqueKey<ActivityTemplatePublishedRecord> ACTIVITY_TEMPLATE_PUBLISHED_PKEY = Internal.createUniqueKey(ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED, DSL.name("activity_template_published_pkey"), new TableField[] { ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED.ID }, true);
    public static final UniqueKey<ActivityTemplateReleaseRecord> ACTIVITY_TEMPLATE_RELEASE_PKEY = Internal.createUniqueKey(ActivityTemplateRelease.ACTIVITY_TEMPLATE_RELEASE, DSL.name("activity_template_release_pkey"), new TableField[] { ActivityTemplateRelease.ACTIVITY_TEMPLATE_RELEASE.ID }, true);
    public static final UniqueKey<ActivityTemplateSubscriptionRecord> ACTIVITY_TEMPLATE_SUBSCRIPTION_PKEY = Internal.createUniqueKey(ActivityTemplateSubscription.ACTIVITY_TEMPLATE_SUBSCRIPTION, DSL.name("activity_template_subscription_pkey"), new TableField[] { ActivityTemplateSubscription.ACTIVITY_TEMPLATE_SUBSCRIPTION.ID }, true);
    public static final UniqueKey<ActivityTemplateViewRecord> ACTIVITY_TEMPLATE_VIEW_PKEY = Internal.createUniqueKey(ActivityTemplateView.ACTIVITY_TEMPLATE_VIEW, DSL.name("activity_template_view_pkey"), new TableField[] { ActivityTemplateView.ACTIVITY_TEMPLATE_VIEW.ID }, true);
    public static final UniqueKey<AddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), new TableField[] { Address.ADDRESS.ID }, true);
    public static final UniqueKey<AggregatedModelRecord> AGGREGATED_MODEL_PKEY = Internal.createUniqueKey(AggregatedModel.AGGREGATED_MODEL, DSL.name("aggregated_model_pkey"), new TableField[] { AggregatedModel.AGGREGATED_MODEL.ID }, true);
    public static final UniqueKey<AggregatedModelSharedRecord> AGGREGATED_MODEL_SHARED_PKEY = Internal.createUniqueKey(AggregatedModelShared.AGGREGATED_MODEL_SHARED, DSL.name("aggregated_model_shared_pkey"), new TableField[] { AggregatedModelShared.AGGREGATED_MODEL_SHARED.ID }, true);
    public static final UniqueKey<BillingAddressRecord> BILLING_ADDRESS_PKEY = Internal.createUniqueKey(BillingAddress.BILLING_ADDRESS, DSL.name("billing_address_pkey"), new TableField[] { BillingAddress.BILLING_ADDRESS.ID }, true);
    public static final UniqueKey<ChartCamembertSettingRecord> CHART_CAMEMBERT_SETTING_PKEY = Internal.createUniqueKey(ChartCamembertSetting.CHART_CAMEMBERT_SETTING, DSL.name("chart_camembert_setting_pkey"), new TableField[] { ChartCamembertSetting.CHART_CAMEMBERT_SETTING.ID }, true);
    public static final UniqueKey<CountryRecord> COUNTRY_PKEY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), new TableField[] { Country.COUNTRY.ID }, true);
    public static final UniqueKey<CurrencyRecord> CURRENCY_PKEY = Internal.createUniqueKey(Currency.CURRENCY, DSL.name("currency_pkey"), new TableField[] { Currency.CURRENCY.ID }, true);
    public static final UniqueKey<DataFieldRecord> DATA_FIELD_PKEY = Internal.createUniqueKey(DataField.DATA_FIELD, DSL.name("data_field_pkey"), new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final UniqueKey<DataFieldExpressionArgRecord> DATA_FIELD_EXPRESSION_ARG_PKEY = Internal.createUniqueKey(DataFieldExpressionArg.DATA_FIELD_EXPRESSION_ARG, DSL.name("data_field_expression_arg_pkey"), new TableField[] { DataFieldExpressionArg.DATA_FIELD_EXPRESSION_ARG.ID }, true);
    public static final UniqueKey<DataFieldOfSheetRecord> DATA_FIELD_OF_SHEET_PKEY = Internal.createUniqueKey(DataFieldOfSheet.DATA_FIELD_OF_SHEET, DSL.name("data_field_of_sheet_pkey"), new TableField[] { DataFieldOfSheet.DATA_FIELD_OF_SHEET.ID }, true);
    public static final UniqueKey<DataLinkRecord> DATA_LINK_PKEY = Internal.createUniqueKey(DataLink.DATA_LINK, DSL.name("data_link_pkey"), new TableField[] { DataLink.DATA_LINK.ID }, true);
    public static final UniqueKey<DataLinkParamRecord> DATA_LINK_PARAM_PKEY = Internal.createUniqueKey(DataLinkParam.DATA_LINK_PARAM, DSL.name("data_link_param_pkey"), new TableField[] { DataLinkParam.DATA_LINK_PARAM.ID }, true);
    public static final UniqueKey<DataLinkSharedRecord> DATA_LINK_SHARED_PKEY = Internal.createUniqueKey(DataLinkShared.DATA_LINK_SHARED, DSL.name("data_link_shared_pkey"), new TableField[] { DataLinkShared.DATA_LINK_SHARED.ID }, true);
    public static final UniqueKey<DataModelRecord> DATA_MODEL_PKEY = Internal.createUniqueKey(DataModel.DATA_MODEL, DSL.name("data_model_pkey"), new TableField[] { DataModel.DATA_MODEL.ID }, true);
    public static final UniqueKey<DataSheetRecord> DATA_SHEET_PKEY = Internal.createUniqueKey(DataSheet.DATA_SHEET, DSL.name("data_sheet_pkey"), new TableField[] { DataSheet.DATA_SHEET.ID }, true);
    public static final UniqueKey<DataSheetModelRecord> DATA_SHEET_MODEL_PKEY = Internal.createUniqueKey(DataSheetModel.DATA_SHEET_MODEL, DSL.name("data_sheet_model_pkey"), new TableField[] { DataSheetModel.DATA_SHEET_MODEL.ID }, true);
    public static final UniqueKey<DataSheetSharedRecord> DATA_SHEET_SHARED_PKEY = Internal.createUniqueKey(DataSheetShared.DATA_SHEET_SHARED, DSL.name("data_sheet_shared_pkey"), new TableField[] { DataSheetShared.DATA_SHEET_SHARED.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("pk_databasechangeloglock"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<DynamicTable_2ColRecord> DYNAMIC_TABLE_2_COL_PKEY = Internal.createUniqueKey(DynamicTable_2Col.DYNAMIC_TABLE_2_COL, DSL.name("dynamic_table_2_col_pkey"), new TableField[] { DynamicTable_2Col.DYNAMIC_TABLE_2_COL.ID }, true);
    public static final UniqueKey<EditableDataFieldRecord> EDITABLE_DATA_FIELD_PKEY = Internal.createUniqueKey(EditableDataField.EDITABLE_DATA_FIELD, DSL.name("editable_data_field_pkey"), new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.ID }, true);
    public static final UniqueKey<EventRecord> EVENT_PKEY = Internal.createUniqueKey(Event.EVENT, DSL.name("event_pkey"), new TableField[] { Event.EVENT.ID }, true);
    public static final UniqueKey<ExpressionArgRecord> EXPRESSION_ARG_PKEY = Internal.createUniqueKey(ExpressionArg.EXPRESSION_ARG, DSL.name("expression_arg_pkey"), new TableField[] { ExpressionArg.EXPRESSION_ARG.ID }, true);
    public static final UniqueKey<ExpressionValueArgRecord> EXPRESSION_VALUE_ARG_PKEY = Internal.createUniqueKey(ExpressionValueArg.EXPRESSION_VALUE_ARG, DSL.name("expression_value_arg_pkey"), new TableField[] { ExpressionValueArg.EXPRESSION_VALUE_ARG.ID }, true);
    public static final UniqueKey<FormularCaseExpressionRecord> FORMULAR_CASE_EXPRESSION_PKEY = Internal.createUniqueKey(FormularCaseExpression.FORMULAR_CASE_EXPRESSION, DSL.name("formular_case_expression_pkey"), new TableField[] { FormularCaseExpression.FORMULAR_CASE_EXPRESSION.ID }, true);
    public static final UniqueKey<FormularConditionRecord> FORMULAR_CONDITION_PKEY = Internal.createUniqueKey(FormularCondition.FORMULAR_CONDITION, DSL.name("formular_condition_pkey"), new TableField[] { FormularCondition.FORMULAR_CONDITION.ID }, true);
    public static final UniqueKey<FormularDataFieldRecord> FORMULAR_DATA_FIELD_PKEY = Internal.createUniqueKey(FormularDataField.FORMULAR_DATA_FIELD, DSL.name("formular_data_field_pkey"), new TableField[] { FormularDataField.FORMULAR_DATA_FIELD.ID }, true);
    public static final UniqueKey<FormularExpressionRecord> FORMULAR_EXPRESSION_PKEY = Internal.createUniqueKey(FormularExpression.FORMULAR_EXPRESSION, DSL.name("formular_expression_pkey"), new TableField[] { FormularExpression.FORMULAR_EXPRESSION.ID }, true);
    public static final UniqueKey<FormularExtendedToModelSourceRecord> FORMULAR_EXTENDED_TO_MODEL_SOURCE_PKEY = Internal.createUniqueKey(FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE, DSL.name("formular_extended_to_model_source_pkey"), new TableField[] { FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE.ID }, true);
    public static final UniqueKey<FormularExtendedToParentSourceRecord> FORMULAR_EXTENDED_TO_PARENT_SOURCE_PKEY = Internal.createUniqueKey(FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE, DSL.name("formular_extended_to_parent_source_pkey"), new TableField[] { FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE.ID }, true);
    public static final UniqueKey<FormularSimpleExpressionRecord> FORMULAR_SIMPLE_EXPRESSION_PKEY = Internal.createUniqueKey(FormularSimpleExpression.FORMULAR_SIMPLE_EXPRESSION, DSL.name("formular_simple_expression_pkey"), new TableField[] { FormularSimpleExpression.FORMULAR_SIMPLE_EXPRESSION.ID }, true);
    public static final UniqueKey<GaugeSettingRecord> GAUGE_SETTING_PKEY = Internal.createUniqueKey(GaugeSetting.GAUGE_SETTING, DSL.name("gauge_setting_pkey"), new TableField[] { GaugeSetting.GAUGE_SETTING.ID }, true);
    public static final UniqueKey<GaugeZoneRecord> GAUGE_ZONE_PKEY = Internal.createUniqueKey(GaugeZone.GAUGE_ZONE, DSL.name("gauge_zone_pkey"), new TableField[] { GaugeZone.GAUGE_ZONE.ID }, true);
    public static final UniqueKey<GoalNumberSettingRecord> GOAL_NUMBER_SETTING_PKEY = Internal.createUniqueKey(GoalNumberSetting.GOAL_NUMBER_SETTING, DSL.name("goal_number_setting_pkey"), new TableField[] { GoalNumberSetting.GOAL_NUMBER_SETTING.ID }, true);
    public static final UniqueKey<IndicatorDynamicNumberParamRecord> INDICATOR_DYNAMIC_NUMBER_PARAM_PKEY = Internal.createUniqueKey(IndicatorDynamicNumberParam.INDICATOR_DYNAMIC_NUMBER_PARAM, DSL.name("indicator_dynamic_number_param_pkey"), new TableField[] { IndicatorDynamicNumberParam.INDICATOR_DYNAMIC_NUMBER_PARAM.ID }, true);
    public static final UniqueKey<IndicatorDynamicParamRecord> INDICATOR_DYNAMIC_PARAM_PKEY = Internal.createUniqueKey(IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM, DSL.name("indicator_dynamic_param_pkey"), new TableField[] { IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM.ID }, true);
    public static final UniqueKey<IndicatorDynamicStringParamRecord> INDICATOR_DYNAMIC_STRING_PARAM_PKEY = Internal.createUniqueKey(IndicatorDynamicStringParam.INDICATOR_DYNAMIC_STRING_PARAM, DSL.name("indicator_dynamic_string_param_pkey"), new TableField[] { IndicatorDynamicStringParam.INDICATOR_DYNAMIC_STRING_PARAM.ID }, true);
    public static final UniqueKey<IndicatorGeneralSettingRecord> INDICATOR_GENERAL_SETTING_PKEY = Internal.createUniqueKey(IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING, DSL.name("indicator_general_setting_pkey"), new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final UniqueKey<IndicatorStaticParamRecord> INDICATOR_STATIC_PARAM_PKEY = Internal.createUniqueKey(IndicatorStaticParam.INDICATOR_STATIC_PARAM, DSL.name("indicator_static_param_pkey"), new TableField[] { IndicatorStaticParam.INDICATOR_STATIC_PARAM.ID }, true);
    public static final UniqueKey<IndicatorTypeRecord> INDICATOR_TYPE_PKEY = Internal.createUniqueKey(IndicatorType.INDICATOR_TYPE, DSL.name("indicator_type_pkey"), new TableField[] { IndicatorType.INDICATOR_TYPE.ID }, true);
    public static final UniqueKey<IndicatorTypeParamRecord> INDICATOR_TYPE_PARAM_PKEY = Internal.createUniqueKey(IndicatorTypeParam.INDICATOR_TYPE_PARAM, DSL.name("indicator_type_param_pkey"), new TableField[] { IndicatorTypeParam.INDICATOR_TYPE_PARAM.ID }, true);
    public static final UniqueKey<InvoiceRecord> INVOICE_PKEY = Internal.createUniqueKey(Invoice.INVOICE, DSL.name("invoice_pkey"), new TableField[] { Invoice.INVOICE.ID }, true);
    public static final UniqueKey<LanguageRecord> LANGUAGE_PKEY = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("language_pkey"), new TableField[] { Language.LANGUAGE.ID }, true);
    public static final UniqueKey<ListDataFieldSourceRecord> LIST_DATA_FIELD_SOURCE_PKEY = Internal.createUniqueKey(ListDataFieldSource.LIST_DATA_FIELD_SOURCE, DSL.name("list_data_field_source_pkey"), new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.ID }, true);
    public static final UniqueKey<ListDataFieldSourceSharedRecord> LIST_DATA_FIELD_SOURCE_SHARED_PKEY = Internal.createUniqueKey(ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED, DSL.name("list_data_field_source_shared_pkey"), new TableField[] { ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED.ID }, true);
    public static final UniqueKey<MappedDataFieldRecord> MAPPED_DATA_FIELD_PKEY = Internal.createUniqueKey(MappedDataField.MAPPED_DATA_FIELD, DSL.name("mapped_data_field_pkey"), new TableField[] { MappedDataField.MAPPED_DATA_FIELD.ID }, true);
    public static final UniqueKey<ModelFilterRecord> MODEL_FILTER_PKEY = Internal.createUniqueKey(ModelFilter.MODEL_FILTER, DSL.name("model_filter_pkey"), new TableField[] { ModelFilter.MODEL_FILTER.ID }, true);
    public static final UniqueKey<ModelFilterConditionRecord> MODEL_FILTER_CONDITION_PKEY = Internal.createUniqueKey(ModelFilterCondition.MODEL_FILTER_CONDITION, DSL.name("model_filter_condition_pkey"), new TableField[] { ModelFilterCondition.MODEL_FILTER_CONDITION.ID }, true);
    public static final UniqueKey<NumberOrientedSettingRecord> NUMBER_ORIENTED_SETTING_PKEY = Internal.createUniqueKey(NumberOrientedSetting.NUMBER_ORIENTED_SETTING, DSL.name("number_oriented_setting_pkey"), new TableField[] { NumberOrientedSetting.NUMBER_ORIENTED_SETTING.ID }, true);
    public static final UniqueKey<OrderRecord> ORDER_PKEY = Internal.createUniqueKey(Order.ORDER, DSL.name("order_pkey"), new TableField[] { Order.ORDER.ID }, true);
    public static final UniqueKey<OrderLineRecord> ORDER_LINE_PKEY = Internal.createUniqueKey(OrderLine.ORDER_LINE, DSL.name("order_line_pkey"), new TableField[] { OrderLine.ORDER_LINE.ID }, true);
    public static final UniqueKey<OrderTaxRecord> ORDER_TAX_PKEY = Internal.createUniqueKey(OrderTax.ORDER_TAX, DSL.name("order_tax_pkey"), new TableField[] { OrderTax.ORDER_TAX.ID }, true);
    public static final UniqueKey<ParamDataFieldRecord> PARAM_DATA_FIELD_PKEY = Internal.createUniqueKey(ParamDataField.PARAM_DATA_FIELD, DSL.name("param_data_field_pkey"), new TableField[] { ParamDataField.PARAM_DATA_FIELD.ID }, true);
    public static final UniqueKey<PaymentMethodRecord> PAYMENT_METHOD_PKEY = Internal.createUniqueKey(PaymentMethod.PAYMENT_METHOD, DSL.name("payment_method_pkey"), new TableField[] { PaymentMethod.PAYMENT_METHOD.ID }, true);
    public static final UniqueKey<PaymentReceiptRecord> PAYMENT_RECEIPT_PKEY = Internal.createUniqueKey(PaymentReceipt.PAYMENT_RECEIPT, DSL.name("payment_receipt_pkey"), new TableField[] { PaymentReceipt.PAYMENT_RECEIPT.ID }, true);
    public static final UniqueKey<PaymentRequestRecord> PAYMENT_REQUEST_PKEY = Internal.createUniqueKey(PaymentRequest.PAYMENT_REQUEST, DSL.name("payment_request_pkey"), new TableField[] { PaymentRequest.PAYMENT_REQUEST.ID }, true);
    public static final UniqueKey<PeriodicityRecord> PERIODICITY_PKEY = Internal.createUniqueKey(Periodicity.PERIODICITY, DSL.name("periodicity_pkey"), new TableField[] { Periodicity.PERIODICITY.ID }, true);
    public static final UniqueKey<PersonRecord> PERSON_PKEY = Internal.createUniqueKey(Person.PERSON, DSL.name("person_pkey"), new TableField[] { Person.PERSON.ID }, true);
    public static final UniqueKey<PlanRecord> PLAN_PKEY = Internal.createUniqueKey(Plan.PLAN, DSL.name("plan_pkey"), new TableField[] { Plan.PLAN.ID }, true);
    public static final UniqueKey<PlanFeatureRecord> PLAN_FEATURE_PKEY = Internal.createUniqueKey(PlanFeature.PLAN_FEATURE, DSL.name("plan_feature_pkey"), new TableField[] { PlanFeature.PLAN_FEATURE.ID }, true);
    public static final UniqueKey<PlanSubscriptionContractRecord> PLAN_SUBSCRIPTION_CONTRACT_PKEY = Internal.createUniqueKey(PlanSubscriptionContract.PLAN_SUBSCRIPTION_CONTRACT, DSL.name("plan_subscription_contract_pkey"), new TableField[] { PlanSubscriptionContract.PLAN_SUBSCRIPTION_CONTRACT.ID }, true);
    public static final UniqueKey<PlannedTaskRecord> PLANNED_TASK_PKEY = Internal.createUniqueKey(PlannedTask.PLANNED_TASK, DSL.name("planned_task_pkey"), new TableField[] { PlannedTask.PLANNED_TASK.ID }, true);
    public static final UniqueKey<ProductRecord> PRODUCT_PKEY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pkey"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<ProductCatalogRecord> PRODUCT_CATALOG_PKEY = Internal.createUniqueKey(ProductCatalog.PRODUCT_CATALOG, DSL.name("product_catalog_pkey"), new TableField[] { ProductCatalog.PRODUCT_CATALOG.ID }, true);
    public static final UniqueKey<ProfileRecord> PROFILE_PKEY = Internal.createUniqueKey(Profile.PROFILE, DSL.name("profile_pkey"), new TableField[] { Profile.PROFILE.ID }, true);
    public static final UniqueKey<ProfileAccessRecord> PROFILE_ACCESS_PKEY = Internal.createUniqueKey(ProfileAccess.PROFILE_ACCESS, DSL.name("profile_access_pkey"), new TableField[] { ProfileAccess.PROFILE_ACCESS.ID }, true);
    public static final UniqueKey<ProfileAccessParamRecord> PROFILE_ACCESS_PARAM_PKEY = Internal.createUniqueKey(ProfileAccessParam.PROFILE_ACCESS_PARAM, DSL.name("profile_access_param_pkey"), new TableField[] { ProfileAccessParam.PROFILE_ACCESS_PARAM.ID }, true);
    public static final UniqueKey<PurchaseOrderRecord> PURCHASE_ORDER_PKEY = Internal.createUniqueKey(PurchaseOrder.PURCHASE_ORDER, DSL.name("purchase_order_pkey"), new TableField[] { PurchaseOrder.PURCHASE_ORDER.ID }, true);
    public static final UniqueKey<RegistrationRequestRecord> REGISTRATION_REQUEST_PKEY = Internal.createUniqueKey(RegistrationRequest.REGISTRATION_REQUEST, DSL.name("registration_request_pkey"), new TableField[] { RegistrationRequest.REGISTRATION_REQUEST.ID }, true);
    public static final UniqueKey<SequenceRecord> SEQUENCE_PKEY = Internal.createUniqueKey(Sequence.SEQUENCE, DSL.name("sequence_pkey"), new TableField[] { Sequence.SEQUENCE.ID }, true);
    public static final UniqueKey<SharedResourceRecord> SHARED_RESOURCE_PKEY = Internal.createUniqueKey(SharedResource.SHARED_RESOURCE, DSL.name("shared_resource_pkey"), new TableField[] { SharedResource.SHARED_RESOURCE.ID }, true);
    public static final UniqueKey<SubscriptionContractRecord> SUBSCRIPTION_CONTRACT_PKEY = Internal.createUniqueKey(SubscriptionContract.SUBSCRIPTION_CONTRACT, DSL.name("subscription_contract_pkey"), new TableField[] { SubscriptionContract.SUBSCRIPTION_CONTRACT.ID }, true);
    public static final UniqueKey<TaxRecord> TAX_PKEY = Internal.createUniqueKey(Tax.TAX, DSL.name("tax_pkey"), new TableField[] { Tax.TAX.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<ValueExpressionArgRecord> VALUE_EXPRESSION_ARG_PKEY = Internal.createUniqueKey(ValueExpressionArg.VALUE_EXPRESSION_ARG, DSL.name("value_expression_arg_pkey"), new TableField[] { ValueExpressionArg.VALUE_EXPRESSION_ARG.ID }, true);
    public static final UniqueKey<WhenCaseRecord> WHEN_CASE_PKEY = Internal.createUniqueKey(WhenCase.WHEN_CASE, DSL.name("when_case_pkey"), new TableField[] { WhenCase.WHEN_CASE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccessParamRecord, AccessRecord> ACCESS_PARAM__ACCESS_PARAM_ACCESS_ID_FKEY = Internal.createForeignKey(AccessParam.ACCESS_PARAM, DSL.name("access_param_access_id_fkey"), new TableField[] { AccessParam.ACCESS_PARAM.ACCESS_ID }, Keys.ACCESS_PKEY, new TableField[] { Access.ACCESS.ID }, true);
    public static final ForeignKey<ActivityRecord, UserRecord> ACTIVITY__ACTIVITY_DESIGNER_ID_FKEY = Internal.createForeignKey(Activity.ACTIVITY, DSL.name("activity_designer_id_fkey"), new TableField[] { Activity.ACTIVITY.DESIGNER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<ActivityRecord, PeriodicityRecord> ACTIVITY__ACTIVITY_PERIODICITY_ID_FKEY = Internal.createForeignKey(Activity.ACTIVITY, DSL.name("activity_periodicity_id_fkey"), new TableField[] { Activity.ACTIVITY.PERIODICITY_ID }, Keys.PERIODICITY_PKEY, new TableField[] { Periodicity.PERIODICITY.ID }, true);
    public static final ForeignKey<ActivityRecord, ActivityRecord> ACTIVITY__ACTIVITY_TEMPLATE_SRC_ID_FKEY = Internal.createForeignKey(Activity.ACTIVITY, DSL.name("activity_template_src_id_fkey"), new TableField[] { Activity.ACTIVITY.TEMPLATE_SRC_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<ActivityParamRecord, ActivityRecord> ACTIVITY_PARAM__ACTIVITY_PARAM_ACTIVITY_ID_FKEY = Internal.createForeignKey(ActivityParam.ACTIVITY_PARAM, DSL.name("activity_param_activity_id_fkey"), new TableField[] { ActivityParam.ACTIVITY_PARAM.ACTIVITY_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<ActivityParamRecord, ParamDataFieldRecord> ACTIVITY_PARAM__ACTIVITY_PARAM_ID_FKEY = Internal.createForeignKey(ActivityParam.ACTIVITY_PARAM, DSL.name("activity_param_id_fkey"), new TableField[] { ActivityParam.ACTIVITY_PARAM.ID }, Keys.PARAM_DATA_FIELD_PKEY, new TableField[] { ParamDataField.PARAM_DATA_FIELD.ID }, true);
    public static final ForeignKey<ActivityTemplateLikeRecord, ActivityTemplatePublishedRecord> ACTIVITY_TEMPLATE_LIKE__ACTIVITY_TEMPLATE_LIKE_TEMPLATE_ID_FKEY = Internal.createForeignKey(ActivityTemplateLike.ACTIVITY_TEMPLATE_LIKE, DSL.name("activity_template_like_template_id_fkey"), new TableField[] { ActivityTemplateLike.ACTIVITY_TEMPLATE_LIKE.TEMPLATE_ID }, Keys.ACTIVITY_TEMPLATE_PUBLISHED_PKEY, new TableField[] { ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED.ID }, true);
    public static final ForeignKey<ActivityTemplateLikeRecord, UserRecord> ACTIVITY_TEMPLATE_LIKE__ACTIVITY_TEMPLATE_LIKE_USER_ID_FKEY = Internal.createForeignKey(ActivityTemplateLike.ACTIVITY_TEMPLATE_LIKE, DSL.name("activity_template_like_user_id_fkey"), new TableField[] { ActivityTemplateLike.ACTIVITY_TEMPLATE_LIKE.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<ActivityTemplatePublishedRecord, ActivityRecord> ACTIVITY_TEMPLATE_PUBLISHED__ACTIVITY_TEMPLATE_PUBLISHED_ID_FKEY = Internal.createForeignKey(ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED, DSL.name("activity_template_published_id_fkey"), new TableField[] { ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED.ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<ActivityTemplatePublishedRecord, ProfileRecord> ACTIVITY_TEMPLATE_PUBLISHED__ACTIVITY_TEMPLATE_PUBLISHED_PROFILE_ID_FKEY = Internal.createForeignKey(ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED, DSL.name("activity_template_published_profile_id_fkey"), new TableField[] { ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED.PROFILE_ID }, Keys.PROFILE_PKEY, new TableField[] { Profile.PROFILE.ID }, true);
    public static final ForeignKey<ActivityTemplateReleaseRecord, ActivityRecord> ACTIVITY_TEMPLATE_RELEASE__ACTIVITY_TEMPLATE_RELEASE_TEMPLATE_ID_FKEY = Internal.createForeignKey(ActivityTemplateRelease.ACTIVITY_TEMPLATE_RELEASE, DSL.name("activity_template_release_template_id_fkey"), new TableField[] { ActivityTemplateRelease.ACTIVITY_TEMPLATE_RELEASE.TEMPLATE_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<ActivityTemplateSubscriptionRecord, ActivityTemplatePublishedRecord> ACTIVITY_TEMPLATE_SUBSCRIPTION__ACTIVITY_TEMPLATE_SUBSCRIPTION_TEMPLATE_ID_FKEY = Internal.createForeignKey(ActivityTemplateSubscription.ACTIVITY_TEMPLATE_SUBSCRIPTION, DSL.name("activity_template_subscription_template_id_fkey"), new TableField[] { ActivityTemplateSubscription.ACTIVITY_TEMPLATE_SUBSCRIPTION.TEMPLATE_ID }, Keys.ACTIVITY_TEMPLATE_PUBLISHED_PKEY, new TableField[] { ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED.ID }, true);
    public static final ForeignKey<ActivityTemplateSubscriptionRecord, UserRecord> ACTIVITY_TEMPLATE_SUBSCRIPTION__ACTIVITY_TEMPLATE_SUBSCRIPTION_USER_ID_FKEY = Internal.createForeignKey(ActivityTemplateSubscription.ACTIVITY_TEMPLATE_SUBSCRIPTION, DSL.name("activity_template_subscription_user_id_fkey"), new TableField[] { ActivityTemplateSubscription.ACTIVITY_TEMPLATE_SUBSCRIPTION.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<ActivityTemplateViewRecord, ActivityTemplatePublishedRecord> ACTIVITY_TEMPLATE_VIEW__ACTIVITY_TEMPLATE_VIEW_TEMPLATE_ID_FKEY = Internal.createForeignKey(ActivityTemplateView.ACTIVITY_TEMPLATE_VIEW, DSL.name("activity_template_view_template_id_fkey"), new TableField[] { ActivityTemplateView.ACTIVITY_TEMPLATE_VIEW.TEMPLATE_ID }, Keys.ACTIVITY_TEMPLATE_PUBLISHED_PKEY, new TableField[] { ActivityTemplatePublished.ACTIVITY_TEMPLATE_PUBLISHED.ID }, true);
    public static final ForeignKey<ActivityTemplateViewRecord, UserRecord> ACTIVITY_TEMPLATE_VIEW__ACTIVITY_TEMPLATE_VIEW_USER_ID_FKEY = Internal.createForeignKey(ActivityTemplateView.ACTIVITY_TEMPLATE_VIEW, DSL.name("activity_template_view_user_id_fkey"), new TableField[] { ActivityTemplateView.ACTIVITY_TEMPLATE_VIEW.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<AddressRecord, CountryRecord> ADDRESS__ADDRESS_COUNTRY_ID_FKEY = Internal.createForeignKey(Address.ADDRESS, DSL.name("address_country_id_fkey"), new TableField[] { Address.ADDRESS.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { Country.COUNTRY.ID }, true);
    public static final ForeignKey<AggregatedModelRecord, DataSheetModelRecord> AGGREGATED_MODEL__AGGREGATED_MODEL_CORE_MODEL_ID_FKEY = Internal.createForeignKey(AggregatedModel.AGGREGATED_MODEL, DSL.name("aggregated_model_core_model_id_fkey"), new TableField[] { AggregatedModel.AGGREGATED_MODEL.CORE_MODEL_ID }, Keys.DATA_SHEET_MODEL_PKEY, new TableField[] { DataSheetModel.DATA_SHEET_MODEL.ID }, true);
    public static final ForeignKey<AggregatedModelRecord, DataFieldRecord> AGGREGATED_MODEL__AGGREGATED_MODEL_DATE_REFERENCE_ID_FKEY = Internal.createForeignKey(AggregatedModel.AGGREGATED_MODEL, DSL.name("aggregated_model_date_reference_id_fkey"), new TableField[] { AggregatedModel.AGGREGATED_MODEL.DATE_REFERENCE_ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<AggregatedModelRecord, DataModelRecord> AGGREGATED_MODEL__AGGREGATED_MODEL_ID_FKEY = Internal.createForeignKey(AggregatedModel.AGGREGATED_MODEL, DSL.name("aggregated_model_id_fkey"), new TableField[] { AggregatedModel.AGGREGATED_MODEL.ID }, Keys.DATA_MODEL_PKEY, new TableField[] { DataModel.DATA_MODEL.ID }, true);
    public static final ForeignKey<AggregatedModelRecord, DataModelRecord> AGGREGATED_MODEL__AGGREGATED_MODEL_MODEL_ID_FKEY = Internal.createForeignKey(AggregatedModel.AGGREGATED_MODEL, DSL.name("aggregated_model_model_id_fkey"), new TableField[] { AggregatedModel.AGGREGATED_MODEL.MODEL_ID }, Keys.DATA_MODEL_PKEY, new TableField[] { DataModel.DATA_MODEL.ID }, true);
    public static final ForeignKey<AggregatedModelSharedRecord, ActivityRecord> AGGREGATED_MODEL_SHARED__AGGREGATED_MODEL_SHARED_ACTIVITY_ID_FKEY = Internal.createForeignKey(AggregatedModelShared.AGGREGATED_MODEL_SHARED, DSL.name("aggregated_model_shared_activity_id_fkey"), new TableField[] { AggregatedModelShared.AGGREGATED_MODEL_SHARED.ACTIVITY_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<AggregatedModelSharedRecord, AggregatedModelRecord> AGGREGATED_MODEL_SHARED__AGGREGATED_MODEL_SHARED_ID_FKEY = Internal.createForeignKey(AggregatedModelShared.AGGREGATED_MODEL_SHARED, DSL.name("aggregated_model_shared_id_fkey"), new TableField[] { AggregatedModelShared.AGGREGATED_MODEL_SHARED.ID }, Keys.AGGREGATED_MODEL_PKEY, new TableField[] { AggregatedModel.AGGREGATED_MODEL.ID }, true);
    public static final ForeignKey<AggregatedModelSharedRecord, AggregatedModelRecord> AGGREGATED_MODEL_SHARED__AGGREGATED_MODEL_SHARED_TEMPLATE_ID_FKEY = Internal.createForeignKey(AggregatedModelShared.AGGREGATED_MODEL_SHARED, DSL.name("aggregated_model_shared_template_id_fkey"), new TableField[] { AggregatedModelShared.AGGREGATED_MODEL_SHARED.TEMPLATE_ID }, Keys.AGGREGATED_MODEL_PKEY, new TableField[] { AggregatedModel.AGGREGATED_MODEL.ID }, true);
    public static final ForeignKey<BillingAddressRecord, AddressRecord> BILLING_ADDRESS__BILLING_ADDRESS_ID_FKEY = Internal.createForeignKey(BillingAddress.BILLING_ADDRESS, DSL.name("billing_address_id_fkey"), new TableField[] { BillingAddress.BILLING_ADDRESS.ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<ChartCamembertSettingRecord, IndicatorGeneralSettingRecord> CHART_CAMEMBERT_SETTING__CHART_CAMEMBERT_SETTING_ID_FKEY = Internal.createForeignKey(ChartCamembertSetting.CHART_CAMEMBERT_SETTING, DSL.name("chart_camembert_setting_id_fkey"), new TableField[] { ChartCamembertSetting.CHART_CAMEMBERT_SETTING.ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<CountryRecord, CurrencyRecord> COUNTRY__COUNTRY_CURRENCY_ID_FKEY = Internal.createForeignKey(Country.COUNTRY, DSL.name("country_currency_id_fkey"), new TableField[] { Country.COUNTRY.CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.ID }, true);
    public static final ForeignKey<DataFieldRecord, DataModelRecord> DATA_FIELD__DATA_FIELD_MODEL_ID_FKEY = Internal.createForeignKey(DataField.DATA_FIELD, DSL.name("data_field_model_id_fkey"), new TableField[] { DataField.DATA_FIELD.MODEL_ID }, Keys.DATA_MODEL_PKEY, new TableField[] { DataModel.DATA_MODEL.ID }, true);
    public static final ForeignKey<DataFieldExpressionArgRecord, DataFieldRecord> DATA_FIELD_EXPRESSION_ARG__DATA_FIELD_EXPRESSION_ARG_FIELD_ID_FKEY = Internal.createForeignKey(DataFieldExpressionArg.DATA_FIELD_EXPRESSION_ARG, DSL.name("data_field_expression_arg_field_id_fkey"), new TableField[] { DataFieldExpressionArg.DATA_FIELD_EXPRESSION_ARG.FIELD_ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<DataFieldExpressionArgRecord, ExpressionArgRecord> DATA_FIELD_EXPRESSION_ARG__DATA_FIELD_EXPRESSION_ARG_ID_FKEY = Internal.createForeignKey(DataFieldExpressionArg.DATA_FIELD_EXPRESSION_ARG, DSL.name("data_field_expression_arg_id_fkey"), new TableField[] { DataFieldExpressionArg.DATA_FIELD_EXPRESSION_ARG.ID }, Keys.EXPRESSION_ARG_PKEY, new TableField[] { ExpressionArg.EXPRESSION_ARG.ID }, true);
    public static final ForeignKey<DataFieldOfSheetRecord, EditableDataFieldRecord> DATA_FIELD_OF_SHEET__DATA_FIELD_OF_SHEET_ORIGIN_FIELD_ID_FKEY = Internal.createForeignKey(DataFieldOfSheet.DATA_FIELD_OF_SHEET, DSL.name("data_field_of_sheet_origin_field_id_fkey"), new TableField[] { DataFieldOfSheet.DATA_FIELD_OF_SHEET.ORIGIN_FIELD_ID }, Keys.EDITABLE_DATA_FIELD_PKEY, new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.ID }, true);
    public static final ForeignKey<DataFieldOfSheetRecord, DataSheetRecord> DATA_FIELD_OF_SHEET__DATA_FIELD_OF_SHEET_SHEET_ID_FKEY = Internal.createForeignKey(DataFieldOfSheet.DATA_FIELD_OF_SHEET, DSL.name("data_field_of_sheet_sheet_id_fkey"), new TableField[] { DataFieldOfSheet.DATA_FIELD_OF_SHEET.SHEET_ID }, Keys.DATA_SHEET_PKEY, new TableField[] { DataSheet.DATA_SHEET.ID }, true);
    public static final ForeignKey<DataFieldOfSheetRecord, DataSheetRecord> DATA_FIELD_OF_SHEET__DATA_FIELD_OF_SHEET_SHEET_TO_REFER_ID_FKEY = Internal.createForeignKey(DataFieldOfSheet.DATA_FIELD_OF_SHEET, DSL.name("data_field_of_sheet_sheet_to_refer_id_fkey"), new TableField[] { DataFieldOfSheet.DATA_FIELD_OF_SHEET.SHEET_TO_REFER_ID }, Keys.DATA_SHEET_PKEY, new TableField[] { DataSheet.DATA_SHEET.ID }, true);
    public static final ForeignKey<DataFieldOfSheetRecord, DataSheetModelRecord> DATA_FIELD_OF_SHEET__DATA_FIELD_OF_SHEET_STRUCTURE_ID_FKEY = Internal.createForeignKey(DataFieldOfSheet.DATA_FIELD_OF_SHEET, DSL.name("data_field_of_sheet_structure_id_fkey"), new TableField[] { DataFieldOfSheet.DATA_FIELD_OF_SHEET.STRUCTURE_ID }, Keys.DATA_SHEET_MODEL_PKEY, new TableField[] { DataSheetModel.DATA_SHEET_MODEL.ID }, true);
    public static final ForeignKey<DataLinkRecord, IndicatorGeneralSettingRecord> DATA_LINK__DATA_LINK_INDICATOR_ID_FKEY = Internal.createForeignKey(DataLink.DATA_LINK, DSL.name("data_link_indicator_id_fkey"), new TableField[] { DataLink.DATA_LINK.INDICATOR_ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<DataLinkRecord, DataModelRecord> DATA_LINK__DATA_LINK_MODEL_ID_FKEY = Internal.createForeignKey(DataLink.DATA_LINK, DSL.name("data_link_model_id_fkey"), new TableField[] { DataLink.DATA_LINK.MODEL_ID }, Keys.DATA_MODEL_PKEY, new TableField[] { DataModel.DATA_MODEL.ID }, true);
    public static final ForeignKey<DataLinkParamRecord, ParamDataFieldRecord> DATA_LINK_PARAM__DATA_LINK_PARAM_ID_FKEY = Internal.createForeignKey(DataLinkParam.DATA_LINK_PARAM, DSL.name("data_link_param_id_fkey"), new TableField[] { DataLinkParam.DATA_LINK_PARAM.ID }, Keys.PARAM_DATA_FIELD_PKEY, new TableField[] { ParamDataField.PARAM_DATA_FIELD.ID }, true);
    public static final ForeignKey<DataLinkParamRecord, DataLinkRecord> DATA_LINK_PARAM__DATA_LINK_PARAM_LINK_ID_FKEY = Internal.createForeignKey(DataLinkParam.DATA_LINK_PARAM, DSL.name("data_link_param_link_id_fkey"), new TableField[] { DataLinkParam.DATA_LINK_PARAM.LINK_ID }, Keys.DATA_LINK_PKEY, new TableField[] { DataLink.DATA_LINK.ID }, true);
    public static final ForeignKey<DataLinkSharedRecord, ActivityRecord> DATA_LINK_SHARED__DATA_LINK_SHARED_ACTIVITY_ID_FKEY = Internal.createForeignKey(DataLinkShared.DATA_LINK_SHARED, DSL.name("data_link_shared_activity_id_fkey"), new TableField[] { DataLinkShared.DATA_LINK_SHARED.ACTIVITY_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<DataLinkSharedRecord, DataLinkRecord> DATA_LINK_SHARED__DATA_LINK_SHARED_ID_FKEY = Internal.createForeignKey(DataLinkShared.DATA_LINK_SHARED, DSL.name("data_link_shared_id_fkey"), new TableField[] { DataLinkShared.DATA_LINK_SHARED.ID }, Keys.DATA_LINK_PKEY, new TableField[] { DataLink.DATA_LINK.ID }, true);
    public static final ForeignKey<DataLinkSharedRecord, DataLinkRecord> DATA_LINK_SHARED__DATA_LINK_SHARED_TEMPLATE_ID_FKEY = Internal.createForeignKey(DataLinkShared.DATA_LINK_SHARED, DSL.name("data_link_shared_template_id_fkey"), new TableField[] { DataLinkShared.DATA_LINK_SHARED.TEMPLATE_ID }, Keys.DATA_LINK_PKEY, new TableField[] { DataLink.DATA_LINK.ID }, true);
    public static final ForeignKey<DataModelRecord, ActivityRecord> DATA_MODEL__DATA_MODEL_ACTIVITY_ID_FKEY = Internal.createForeignKey(DataModel.DATA_MODEL, DSL.name("data_model_activity_id_fkey"), new TableField[] { DataModel.DATA_MODEL.ACTIVITY_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<DataSheetRecord, DataSheetModelRecord> DATA_SHEET__DATA_SHEET_MODEL_ID_FKEY = Internal.createForeignKey(DataSheet.DATA_SHEET, DSL.name("data_sheet_model_id_fkey"), new TableField[] { DataSheet.DATA_SHEET.MODEL_ID }, Keys.DATA_SHEET_MODEL_PKEY, new TableField[] { DataSheetModel.DATA_SHEET_MODEL.ID }, true);
    public static final ForeignKey<DataSheetRecord, DataFieldOfSheetRecord> DATA_SHEET__DATA_SHEET_TABLE_ID_FKEY = Internal.createForeignKey(DataSheet.DATA_SHEET, DSL.name("data_sheet_table_id_fkey"), new TableField[] { DataSheet.DATA_SHEET.TABLE_ID }, Keys.DATA_FIELD_OF_SHEET_PKEY, new TableField[] { DataFieldOfSheet.DATA_FIELD_OF_SHEET.ID }, true);
    public static final ForeignKey<DataSheetModelRecord, DataModelRecord> DATA_SHEET_MODEL__DATA_SHEET_MODEL_ID_FKEY = Internal.createForeignKey(DataSheetModel.DATA_SHEET_MODEL, DSL.name("data_sheet_model_id_fkey"), new TableField[] { DataSheetModel.DATA_SHEET_MODEL.ID }, Keys.DATA_MODEL_PKEY, new TableField[] { DataModel.DATA_MODEL.ID }, true);
    public static final ForeignKey<DataSheetSharedRecord, ActivityRecord> DATA_SHEET_SHARED__DATA_SHEET_SHARED_ACTIVITY_ID_FKEY = Internal.createForeignKey(DataSheetShared.DATA_SHEET_SHARED, DSL.name("data_sheet_shared_activity_id_fkey"), new TableField[] { DataSheetShared.DATA_SHEET_SHARED.ACTIVITY_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<DataSheetSharedRecord, DataSheetRecord> DATA_SHEET_SHARED__DATA_SHEET_SHARED_ID_FKEY = Internal.createForeignKey(DataSheetShared.DATA_SHEET_SHARED, DSL.name("data_sheet_shared_id_fkey"), new TableField[] { DataSheetShared.DATA_SHEET_SHARED.ID }, Keys.DATA_SHEET_PKEY, new TableField[] { DataSheet.DATA_SHEET.ID }, true);
    public static final ForeignKey<DataSheetSharedRecord, DataSheetRecord> DATA_SHEET_SHARED__DATA_SHEET_SHARED_TEMPLATE_ID_FKEY = Internal.createForeignKey(DataSheetShared.DATA_SHEET_SHARED, DSL.name("data_sheet_shared_template_id_fkey"), new TableField[] { DataSheetShared.DATA_SHEET_SHARED.TEMPLATE_ID }, Keys.DATA_SHEET_PKEY, new TableField[] { DataSheet.DATA_SHEET.ID }, true);
    public static final ForeignKey<DynamicTable_2ColRecord, IndicatorGeneralSettingRecord> DYNAMIC_TABLE_2_COL__DYNAMIC_TABLE_2_COL_ID_FKEY = Internal.createForeignKey(DynamicTable_2Col.DYNAMIC_TABLE_2_COL, DSL.name("dynamic_table_2_col_id_fkey"), new TableField[] { DynamicTable_2Col.DYNAMIC_TABLE_2_COL.ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<EditableDataFieldRecord, DataFieldRecord> EDITABLE_DATA_FIELD__EDITABLE_DATA_FIELD_ID_FKEY = Internal.createForeignKey(EditableDataField.EDITABLE_DATA_FIELD, DSL.name("editable_data_field_id_fkey"), new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<EditableDataFieldRecord, DataSheetModelRecord> EDITABLE_DATA_FIELD__EDITABLE_DATA_FIELD_STRUCTURE_ID_FKEY = Internal.createForeignKey(EditableDataField.EDITABLE_DATA_FIELD, DSL.name("editable_data_field_structure_id_fkey"), new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.STRUCTURE_ID }, Keys.DATA_SHEET_MODEL_PKEY, new TableField[] { DataSheetModel.DATA_SHEET_MODEL.ID }, true);
    public static final ForeignKey<ExpressionArgRecord, FormularExpressionRecord> EXPRESSION_ARG__EXPRESSION_ARG_EXPRESSION_ID_FKEY = Internal.createForeignKey(ExpressionArg.EXPRESSION_ARG, DSL.name("expression_arg_expression_id_fkey"), new TableField[] { ExpressionArg.EXPRESSION_ARG.EXPRESSION_ID }, Keys.FORMULAR_EXPRESSION_PKEY, new TableField[] { FormularExpression.FORMULAR_EXPRESSION.ID }, true);
    public static final ForeignKey<ExpressionValueArgRecord, ExpressionArgRecord> EXPRESSION_VALUE_ARG__EXPRESSION_VALUE_ARG_ID_FKEY = Internal.createForeignKey(ExpressionValueArg.EXPRESSION_VALUE_ARG, DSL.name("expression_value_arg_id_fkey"), new TableField[] { ExpressionValueArg.EXPRESSION_VALUE_ARG.ID }, Keys.EXPRESSION_ARG_PKEY, new TableField[] { ExpressionArg.EXPRESSION_ARG.ID }, true);
    public static final ForeignKey<ExpressionValueArgRecord, FormularExpressionRecord> EXPRESSION_VALUE_ARG__EXPRESSION_VALUE_ARG_TARGET_EXPR_ID_FKEY = Internal.createForeignKey(ExpressionValueArg.EXPRESSION_VALUE_ARG, DSL.name("expression_value_arg_target_expr_id_fkey"), new TableField[] { ExpressionValueArg.EXPRESSION_VALUE_ARG.TARGET_EXPR_ID }, Keys.FORMULAR_EXPRESSION_PKEY, new TableField[] { FormularExpression.FORMULAR_EXPRESSION.ID }, true);
    public static final ForeignKey<FormularCaseExpressionRecord, FormularExpressionRecord> FORMULAR_CASE_EXPRESSION__FORMULAR_CASE_EXPRESSION_ID_FKEY = Internal.createForeignKey(FormularCaseExpression.FORMULAR_CASE_EXPRESSION, DSL.name("formular_case_expression_id_fkey"), new TableField[] { FormularCaseExpression.FORMULAR_CASE_EXPRESSION.ID }, Keys.FORMULAR_EXPRESSION_PKEY, new TableField[] { FormularExpression.FORMULAR_EXPRESSION.ID }, true);
    public static final ForeignKey<FormularConditionRecord, FormularDataFieldRecord> FORMULAR_CONDITION__FORMULAR_CONDITION_ID_FKEY = Internal.createForeignKey(FormularCondition.FORMULAR_CONDITION, DSL.name("formular_condition_id_fkey"), new TableField[] { FormularCondition.FORMULAR_CONDITION.ID }, Keys.FORMULAR_DATA_FIELD_PKEY, new TableField[] { FormularDataField.FORMULAR_DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularConditionRecord, ParamDataFieldRecord> FORMULAR_CONDITION__FORMULAR_CONDITION_PARAM_ID_FKEY = Internal.createForeignKey(FormularCondition.FORMULAR_CONDITION, DSL.name("formular_condition_param_id_fkey"), new TableField[] { FormularCondition.FORMULAR_CONDITION.PARAM_ID }, Keys.PARAM_DATA_FIELD_PKEY, new TableField[] { ParamDataField.PARAM_DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularDataFieldRecord, DataFieldRecord> FORMULAR_DATA_FIELD__FORMULAR_DATA_FIELD_ID_FKEY = Internal.createForeignKey(FormularDataField.FORMULAR_DATA_FIELD, DSL.name("formular_data_field_id_fkey"), new TableField[] { FormularDataField.FORMULAR_DATA_FIELD.ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularExpressionRecord, FormularDataFieldRecord> FORMULAR_EXPRESSION__FORMULAR_EXPRESSION_FORMULAR_ID_FKEY = Internal.createForeignKey(FormularExpression.FORMULAR_EXPRESSION, DSL.name("formular_expression_formular_id_fkey"), new TableField[] { FormularExpression.FORMULAR_EXPRESSION.FORMULAR_ID }, Keys.FORMULAR_DATA_FIELD_PKEY, new TableField[] { FormularDataField.FORMULAR_DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularExtendedToModelSourceRecord, FormularExpressionRecord> FORMULAR_EXTENDED_TO_MODEL_SOURCE__FORMULAR_EXTENDED_TO_MODEL_SOURCE_EXPR_ID_FKEY = Internal.createForeignKey(FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE, DSL.name("formular_extended_to_model_source_expr_id_fkey"), new TableField[] { FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE.EXPR_ID }, Keys.FORMULAR_EXPRESSION_PKEY, new TableField[] { FormularExpression.FORMULAR_EXPRESSION.ID }, true);
    public static final ForeignKey<FormularExtendedToModelSourceRecord, EditableDataFieldRecord> FORMULAR_EXTENDED_TO_MODEL_SOURCE__FORMULAR_EXTENDED_TO_MODEL_SOURCE_FIELD_TO_EXTEND_ID = Internal.createForeignKey(FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE, DSL.name("formular_extended_to_model_source_field_to_extend_id"), new TableField[] { FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE.FIELD_TO_EXTEND_ID }, Keys.EDITABLE_DATA_FIELD_PKEY, new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularExtendedToModelSourceRecord, EditableDataFieldRecord> FORMULAR_EXTENDED_TO_MODEL_SOURCE__FORMULAR_EXTENDED_TO_MODEL_SOURCE_MODEL_FIELD_ID_FKE = Internal.createForeignKey(FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE, DSL.name("formular_extended_to_model_source_model_field_id_fke"), new TableField[] { FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE.MODEL_FIELD_ID }, Keys.EDITABLE_DATA_FIELD_PKEY, new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularExtendedToModelSourceRecord, DataSheetModelRecord> FORMULAR_EXTENDED_TO_MODEL_SOURCE__FORMULAR_EXTENDED_TO_MODEL_SOURCE_MODEL_ID_FKEY = Internal.createForeignKey(FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE, DSL.name("formular_extended_to_model_source_model_id_fkey"), new TableField[] { FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE.MODEL_ID }, Keys.DATA_SHEET_MODEL_PKEY, new TableField[] { DataSheetModel.DATA_SHEET_MODEL.ID }, true);
    public static final ForeignKey<FormularExtendedToModelSourceRecord, DataFieldRecord> FORMULAR_EXTENDED_TO_MODEL_SOURCE__FORMULAR_EXTENDED_TO_MODEL_SOURCE_REFERENCE_ID_FKEY = Internal.createForeignKey(FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE, DSL.name("formular_extended_to_model_source_reference_id_fkey"), new TableField[] { FormularExtendedToModelSource.FORMULAR_EXTENDED_TO_MODEL_SOURCE.REFERENCE_ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularExtendedToParentSourceRecord, FormularExpressionRecord> FORMULAR_EXTENDED_TO_PARENT_SOURCE__FORMULAR_EXTENDED_TO_PARENT_SOURCE_EXPR_ID_FKEY = Internal.createForeignKey(FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE, DSL.name("formular_extended_to_parent_source_expr_id_fkey"), new TableField[] { FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE.EXPR_ID }, Keys.FORMULAR_EXPRESSION_PKEY, new TableField[] { FormularExpression.FORMULAR_EXPRESSION.ID }, true);
    public static final ForeignKey<FormularExtendedToParentSourceRecord, EditableDataFieldRecord> FORMULAR_EXTENDED_TO_PARENT_SOURCE__FORMULAR_EXTENDED_TO_PARENT_SOURCE_FIELD_ID_FKEY = Internal.createForeignKey(FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE, DSL.name("formular_extended_to_parent_source_field_id_fkey"), new TableField[] { FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE.FIELD_ID }, Keys.EDITABLE_DATA_FIELD_PKEY, new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.ID }, true);
    public static final ForeignKey<FormularExtendedToParentSourceRecord, ListDataFieldSourceRecord> FORMULAR_EXTENDED_TO_PARENT_SOURCE__FORMULAR_EXTENDED_TO_PARENT_SOURCE_LIST_SOURCE_ID_FK = Internal.createForeignKey(FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE, DSL.name("formular_extended_to_parent_source_list_source_id_fk"), new TableField[] { FormularExtendedToParentSource.FORMULAR_EXTENDED_TO_PARENT_SOURCE.LIST_SOURCE_ID }, Keys.LIST_DATA_FIELD_SOURCE_PKEY, new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.ID }, true);
    public static final ForeignKey<FormularSimpleExpressionRecord, FormularExpressionRecord> FORMULAR_SIMPLE_EXPRESSION__FORMULAR_SIMPLE_EXPRESSION_ID_FKEY = Internal.createForeignKey(FormularSimpleExpression.FORMULAR_SIMPLE_EXPRESSION, DSL.name("formular_simple_expression_id_fkey"), new TableField[] { FormularSimpleExpression.FORMULAR_SIMPLE_EXPRESSION.ID }, Keys.FORMULAR_EXPRESSION_PKEY, new TableField[] { FormularExpression.FORMULAR_EXPRESSION.ID }, true);
    public static final ForeignKey<GaugeSettingRecord, IndicatorGeneralSettingRecord> GAUGE_SETTING__GAUGE_SETTING_ID_FKEY = Internal.createForeignKey(GaugeSetting.GAUGE_SETTING, DSL.name("gauge_setting_id_fkey"), new TableField[] { GaugeSetting.GAUGE_SETTING.ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<GaugeZoneRecord, GaugeSettingRecord> GAUGE_ZONE__GAUGE_ZONE_GAUGE_ID_FKEY = Internal.createForeignKey(GaugeZone.GAUGE_ZONE, DSL.name("gauge_zone_gauge_id_fkey"), new TableField[] { GaugeZone.GAUGE_ZONE.GAUGE_ID }, Keys.GAUGE_SETTING_PKEY, new TableField[] { GaugeSetting.GAUGE_SETTING.ID }, true);
    public static final ForeignKey<GoalNumberSettingRecord, IndicatorGeneralSettingRecord> GOAL_NUMBER_SETTING__GOAL_NUMBER_SETTING_ID_FKEY = Internal.createForeignKey(GoalNumberSetting.GOAL_NUMBER_SETTING, DSL.name("goal_number_setting_id_fkey"), new TableField[] { GoalNumberSetting.GOAL_NUMBER_SETTING.ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<IndicatorDynamicNumberParamRecord, IndicatorDynamicParamRecord> INDICATOR_DYNAMIC_NUMBER_PARAM__INDICATOR_DYNAMIC_NUMBER_PARAM_ID_FKEY = Internal.createForeignKey(IndicatorDynamicNumberParam.INDICATOR_DYNAMIC_NUMBER_PARAM, DSL.name("indicator_dynamic_number_param_id_fkey"), new TableField[] { IndicatorDynamicNumberParam.INDICATOR_DYNAMIC_NUMBER_PARAM.ID }, Keys.INDICATOR_DYNAMIC_PARAM_PKEY, new TableField[] { IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM.ID }, true);
    public static final ForeignKey<IndicatorDynamicParamRecord, IndicatorGeneralSettingRecord> INDICATOR_DYNAMIC_PARAM__INDICATOR_DYNAMIC_PARAM_INDICATOR_ID_FKEY = Internal.createForeignKey(IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM, DSL.name("indicator_dynamic_param_indicator_id_fkey"), new TableField[] { IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM.INDICATOR_ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<IndicatorDynamicParamRecord, IndicatorTypeParamRecord> INDICATOR_DYNAMIC_PARAM__INDICATOR_DYNAMIC_PARAM_ORIGIN_ID_FKEY = Internal.createForeignKey(IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM, DSL.name("indicator_dynamic_param_origin_id_fkey"), new TableField[] { IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM.ORIGIN_ID }, Keys.INDICATOR_TYPE_PARAM_PKEY, new TableField[] { IndicatorTypeParam.INDICATOR_TYPE_PARAM.ID }, true);
    public static final ForeignKey<IndicatorDynamicStringParamRecord, IndicatorDynamicParamRecord> INDICATOR_DYNAMIC_STRING_PARAM__INDICATOR_DYNAMIC_STRING_PARAM_ID_FKEY = Internal.createForeignKey(IndicatorDynamicStringParam.INDICATOR_DYNAMIC_STRING_PARAM, DSL.name("indicator_dynamic_string_param_id_fkey"), new TableField[] { IndicatorDynamicStringParam.INDICATOR_DYNAMIC_STRING_PARAM.ID }, Keys.INDICATOR_DYNAMIC_PARAM_PKEY, new TableField[] { IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM.ID }, true);
    public static final ForeignKey<IndicatorGeneralSettingRecord, ActivityRecord> INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_ACTIVITY_ID_FKEY = Internal.createForeignKey(IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING, DSL.name("indicator_general_setting_activity_id_fkey"), new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ACTIVITY_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<IndicatorGeneralSettingRecord, PeriodicityRecord> INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_PERIODICITY_ID_FKEY = Internal.createForeignKey(IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING, DSL.name("indicator_general_setting_periodicity_id_fkey"), new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.PERIODICITY_ID }, Keys.PERIODICITY_PKEY, new TableField[] { Periodicity.PERIODICITY.ID }, true);
    public static final ForeignKey<IndicatorGeneralSettingRecord, IndicatorTypeRecord> INDICATOR_GENERAL_SETTING__INDICATOR_GENERAL_SETTING_TYPE_ID_FKEY = Internal.createForeignKey(IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING, DSL.name("indicator_general_setting_type_id_fkey"), new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.TYPE_ID }, Keys.INDICATOR_TYPE_PKEY, new TableField[] { IndicatorType.INDICATOR_TYPE.ID }, true);
    public static final ForeignKey<IndicatorStaticParamRecord, IndicatorGeneralSettingRecord> INDICATOR_STATIC_PARAM__INDICATOR_STATIC_PARAM_INDICATOR_ID_FKEY = Internal.createForeignKey(IndicatorStaticParam.INDICATOR_STATIC_PARAM, DSL.name("indicator_static_param_indicator_id_fkey"), new TableField[] { IndicatorStaticParam.INDICATOR_STATIC_PARAM.INDICATOR_ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<IndicatorStaticParamRecord, IndicatorTypeParamRecord> INDICATOR_STATIC_PARAM__INDICATOR_STATIC_PARAM_ORIGIN_ID_FKEY = Internal.createForeignKey(IndicatorStaticParam.INDICATOR_STATIC_PARAM, DSL.name("indicator_static_param_origin_id_fkey"), new TableField[] { IndicatorStaticParam.INDICATOR_STATIC_PARAM.ORIGIN_ID }, Keys.INDICATOR_TYPE_PARAM_PKEY, new TableField[] { IndicatorTypeParam.INDICATOR_TYPE_PARAM.ID }, true);
    public static final ForeignKey<IndicatorTypeParamRecord, IndicatorTypeRecord> INDICATOR_TYPE_PARAM__INDICATOR_TYPE_PARAM_INDICATOR_TYPE_ID_FKEY = Internal.createForeignKey(IndicatorTypeParam.INDICATOR_TYPE_PARAM, DSL.name("indicator_type_param_indicator_type_id_fkey"), new TableField[] { IndicatorTypeParam.INDICATOR_TYPE_PARAM.INDICATOR_TYPE_ID }, Keys.INDICATOR_TYPE_PKEY, new TableField[] { IndicatorType.INDICATOR_TYPE.ID }, true);
    public static final ForeignKey<InvoiceRecord, OrderRecord> INVOICE__INVOICE_ID_FKEY = Internal.createForeignKey(Invoice.INVOICE, DSL.name("invoice_id_fkey"), new TableField[] { Invoice.INVOICE.ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ID }, true);
    public static final ForeignKey<InvoiceRecord, PurchaseOrderRecord> INVOICE__INVOICE_PURCHASE_ORDER_ID_FKEY = Internal.createForeignKey(Invoice.INVOICE, DSL.name("invoice_purchase_order_id_fkey"), new TableField[] { Invoice.INVOICE.PURCHASE_ORDER_ID }, Keys.PURCHASE_ORDER_PKEY, new TableField[] { PurchaseOrder.PURCHASE_ORDER.ID }, true);
    public static final ForeignKey<ListDataFieldSourceRecord, EditableDataFieldRecord> LIST_DATA_FIELD_SOURCE__LIST_DATA_FIELD_SOURCE_FIELD_ID_FKEY = Internal.createForeignKey(ListDataFieldSource.LIST_DATA_FIELD_SOURCE, DSL.name("list_data_field_source_field_id_fkey"), new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.FIELD_ID }, Keys.EDITABLE_DATA_FIELD_PKEY, new TableField[] { EditableDataField.EDITABLE_DATA_FIELD.ID }, true);
    public static final ForeignKey<ListDataFieldSourceRecord, DataFieldRecord> LIST_DATA_FIELD_SOURCE__LIST_DATA_FIELD_SOURCE_FIELD_TO_DISPLAY_ID_FKEY = Internal.createForeignKey(ListDataFieldSource.LIST_DATA_FIELD_SOURCE, DSL.name("list_data_field_source_field_to_display_id_fkey"), new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.FIELD_TO_DISPLAY_ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<ListDataFieldSourceRecord, DataModelRecord> LIST_DATA_FIELD_SOURCE__LIST_DATA_FIELD_SOURCE_MODEL_ID_FKEY = Internal.createForeignKey(ListDataFieldSource.LIST_DATA_FIELD_SOURCE, DSL.name("list_data_field_source_model_id_fkey"), new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.MODEL_ID }, Keys.DATA_MODEL_PKEY, new TableField[] { DataModel.DATA_MODEL.ID }, true);
    public static final ForeignKey<ListDataFieldSourceRecord, DataFieldRecord> LIST_DATA_FIELD_SOURCE__LIST_DATA_FIELD_SOURCE_ORDER_FIELD_ID_FKEY = Internal.createForeignKey(ListDataFieldSource.LIST_DATA_FIELD_SOURCE, DSL.name("list_data_field_source_order_field_id_fkey"), new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.ORDER_FIELD_ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<ListDataFieldSourceSharedRecord, ActivityRecord> LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_ACTIVITY_ID_FKEY = Internal.createForeignKey(ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED, DSL.name("list_data_field_source_shared_activity_id_fkey"), new TableField[] { ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED.ACTIVITY_ID }, Keys.ACTIVITY_PKEY, new TableField[] { Activity.ACTIVITY.ID }, true);
    public static final ForeignKey<ListDataFieldSourceSharedRecord, ListDataFieldSourceRecord> LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_ID_FKEY = Internal.createForeignKey(ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED, DSL.name("list_data_field_source_shared_id_fkey"), new TableField[] { ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED.ID }, Keys.LIST_DATA_FIELD_SOURCE_PKEY, new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.ID }, true);
    public static final ForeignKey<ListDataFieldSourceSharedRecord, ListDataFieldSourceRecord> LIST_DATA_FIELD_SOURCE_SHARED__LIST_DATA_FIELD_SOURCE_SHARED_TEMPLATE_ID_FKEY = Internal.createForeignKey(ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED, DSL.name("list_data_field_source_shared_template_id_fkey"), new TableField[] { ListDataFieldSourceShared.LIST_DATA_FIELD_SOURCE_SHARED.TEMPLATE_ID }, Keys.LIST_DATA_FIELD_SOURCE_PKEY, new TableField[] { ListDataFieldSource.LIST_DATA_FIELD_SOURCE.ID }, true);
    public static final ForeignKey<MappedDataFieldRecord, DataFieldRecord> MAPPED_DATA_FIELD__MAPPED_DATA_FIELD_FIELD_TO_USE_ID_FKEY = Internal.createForeignKey(MappedDataField.MAPPED_DATA_FIELD, DSL.name("mapped_data_field_field_to_use_id_fkey"), new TableField[] { MappedDataField.MAPPED_DATA_FIELD.FIELD_TO_USE_ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<MappedDataFieldRecord, DataLinkRecord> MAPPED_DATA_FIELD__MAPPED_DATA_FIELD_LINK_ID_FKEY = Internal.createForeignKey(MappedDataField.MAPPED_DATA_FIELD, DSL.name("mapped_data_field_link_id_fkey"), new TableField[] { MappedDataField.MAPPED_DATA_FIELD.LINK_ID }, Keys.DATA_LINK_PKEY, new TableField[] { DataLink.DATA_LINK.ID }, true);
    public static final ForeignKey<MappedDataFieldRecord, IndicatorDynamicParamRecord> MAPPED_DATA_FIELD__MAPPED_DATA_FIELD_PARAM_ID_FKEY = Internal.createForeignKey(MappedDataField.MAPPED_DATA_FIELD, DSL.name("mapped_data_field_param_id_fkey"), new TableField[] { MappedDataField.MAPPED_DATA_FIELD.PARAM_ID }, Keys.INDICATOR_DYNAMIC_PARAM_PKEY, new TableField[] { IndicatorDynamicParam.INDICATOR_DYNAMIC_PARAM.ID }, true);
    public static final ForeignKey<ModelFilterRecord, AggregatedModelRecord> MODEL_FILTER__MODEL_FILTER_MODEL_ID_FKEY = Internal.createForeignKey(ModelFilter.MODEL_FILTER, DSL.name("model_filter_model_id_fkey"), new TableField[] { ModelFilter.MODEL_FILTER.MODEL_ID }, Keys.AGGREGATED_MODEL_PKEY, new TableField[] { AggregatedModel.AGGREGATED_MODEL.ID }, true);
    public static final ForeignKey<ModelFilterConditionRecord, DataFieldRecord> MODEL_FILTER_CONDITION__MODEL_FILTER_CONDITION_FIELD_ID_FKEY = Internal.createForeignKey(ModelFilterCondition.MODEL_FILTER_CONDITION, DSL.name("model_filter_condition_field_id_fkey"), new TableField[] { ModelFilterCondition.MODEL_FILTER_CONDITION.FIELD_ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<ModelFilterConditionRecord, ModelFilterRecord> MODEL_FILTER_CONDITION__MODEL_FILTER_CONDITION_FILTER_ID_FKEY = Internal.createForeignKey(ModelFilterCondition.MODEL_FILTER_CONDITION, DSL.name("model_filter_condition_filter_id_fkey"), new TableField[] { ModelFilterCondition.MODEL_FILTER_CONDITION.FILTER_ID }, Keys.MODEL_FILTER_PKEY, new TableField[] { ModelFilter.MODEL_FILTER.ID }, true);
    public static final ForeignKey<NumberOrientedSettingRecord, IndicatorGeneralSettingRecord> NUMBER_ORIENTED_SETTING__NUMBER_ORIENTED_SETTING_ID_FKEY = Internal.createForeignKey(NumberOrientedSetting.NUMBER_ORIENTED_SETTING, DSL.name("number_oriented_setting_id_fkey"), new TableField[] { NumberOrientedSetting.NUMBER_ORIENTED_SETTING.ID }, Keys.INDICATOR_GENERAL_SETTING_PKEY, new TableField[] { IndicatorGeneralSetting.INDICATOR_GENERAL_SETTING.ID }, true);
    public static final ForeignKey<OrderRecord, CurrencyRecord> ORDER__ORDER_BILLING_CURRENCY_ID_FKEY = Internal.createForeignKey(Order.ORDER, DSL.name("order_billing_currency_id_fkey"), new TableField[] { Order.ORDER.BILLING_CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.ID }, true);
    public static final ForeignKey<OrderRecord, CurrencyRecord> ORDER__ORDER_CURRENCY_ID_FKEY = Internal.createForeignKey(Order.ORDER, DSL.name("order_currency_id_fkey"), new TableField[] { Order.ORDER.CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.ID }, true);
    public static final ForeignKey<OrderRecord, AddressRecord> ORDER__ORDER_CUSTOMER_ADDRESS_ID_FKEY = Internal.createForeignKey(Order.ORDER, DSL.name("order_customer_address_id_fkey"), new TableField[] { Order.ORDER.CUSTOMER_ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<OrderRecord, PersonRecord> ORDER__ORDER_CUSTOMER_ID_FKEY = Internal.createForeignKey(Order.ORDER, DSL.name("order_customer_id_fkey"), new TableField[] { Order.ORDER.CUSTOMER_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<OrderRecord, BillingAddressRecord> ORDER__ORDER_SUPPLIER_ADDRESS_ID_FKEY = Internal.createForeignKey(Order.ORDER, DSL.name("order_supplier_address_id_fkey"), new TableField[] { Order.ORDER.SUPPLIER_ADDRESS_ID }, Keys.BILLING_ADDRESS_PKEY, new TableField[] { BillingAddress.BILLING_ADDRESS.ID }, true);
    public static final ForeignKey<OrderRecord, PersonRecord> ORDER__ORDER_SUPPLIER_ID_FKEY = Internal.createForeignKey(Order.ORDER, DSL.name("order_supplier_id_fkey"), new TableField[] { Order.ORDER.SUPPLIER_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<OrderLineRecord, OrderRecord> ORDER_LINE__ORDER_LINE_ORDER_ID_FKEY = Internal.createForeignKey(OrderLine.ORDER_LINE, DSL.name("order_line_order_id_fkey"), new TableField[] { OrderLine.ORDER_LINE.ORDER_ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ID }, true);
    public static final ForeignKey<OrderLineRecord, ProductRecord> ORDER_LINE__ORDER_LINE_PRODUCT_ID_FKEY = Internal.createForeignKey(OrderLine.ORDER_LINE, DSL.name("order_line_product_id_fkey"), new TableField[] { OrderLine.ORDER_LINE.PRODUCT_ID }, Keys.PRODUCT_PKEY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<OrderTaxRecord, OrderRecord> ORDER_TAX__ORDER_TAX_ORDER_ID_FKEY = Internal.createForeignKey(OrderTax.ORDER_TAX, DSL.name("order_tax_order_id_fkey"), new TableField[] { OrderTax.ORDER_TAX.ORDER_ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ID }, true);
    public static final ForeignKey<OrderTaxRecord, TaxRecord> ORDER_TAX__ORDER_TAX_ORIGIN_ID_FKEY = Internal.createForeignKey(OrderTax.ORDER_TAX, DSL.name("order_tax_origin_id_fkey"), new TableField[] { OrderTax.ORDER_TAX.ORIGIN_ID }, Keys.TAX_PKEY, new TableField[] { Tax.TAX.ID }, true);
    public static final ForeignKey<ParamDataFieldRecord, DataFieldRecord> PARAM_DATA_FIELD__PARAM_DATA_FIELD_ID_FKEY = Internal.createForeignKey(ParamDataField.PARAM_DATA_FIELD, DSL.name("param_data_field_id_fkey"), new TableField[] { ParamDataField.PARAM_DATA_FIELD.ID }, Keys.DATA_FIELD_PKEY, new TableField[] { DataField.DATA_FIELD.ID }, true);
    public static final ForeignKey<PaymentMethodRecord, PersonRecord> PAYMENT_METHOD__PAYMENT_METHOD_DEFAULT_CASHIER_ID_FKEY = Internal.createForeignKey(PaymentMethod.PAYMENT_METHOD, DSL.name("payment_method_default_cashier_id_fkey"), new TableField[] { PaymentMethod.PAYMENT_METHOD.DEFAULT_CASHIER_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<PaymentReceiptRecord, PersonRecord> PAYMENT_RECEIPT__PAYMENT_RECEIPT_CASHIER_ID_FKEY = Internal.createForeignKey(PaymentReceipt.PAYMENT_RECEIPT, DSL.name("payment_receipt_cashier_id_fkey"), new TableField[] { PaymentReceipt.PAYMENT_RECEIPT.CASHIER_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<PaymentReceiptRecord, PaymentMethodRecord> PAYMENT_RECEIPT__PAYMENT_RECEIPT_METHOD_ID_FKEY = Internal.createForeignKey(PaymentReceipt.PAYMENT_RECEIPT, DSL.name("payment_receipt_method_id_fkey"), new TableField[] { PaymentReceipt.PAYMENT_RECEIPT.METHOD_ID }, Keys.PAYMENT_METHOD_PKEY, new TableField[] { PaymentMethod.PAYMENT_METHOD.ID }, true);
    public static final ForeignKey<PaymentReceiptRecord, OrderRecord> PAYMENT_RECEIPT__PAYMENT_RECEIPT_ORDER_ID_FKEY = Internal.createForeignKey(PaymentReceipt.PAYMENT_RECEIPT, DSL.name("payment_receipt_order_id_fkey"), new TableField[] { PaymentReceipt.PAYMENT_RECEIPT.ORDER_ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ID }, true);
    public static final ForeignKey<PaymentReceiptRecord, PersonRecord> PAYMENT_RECEIPT__PAYMENT_RECEIPT_REMITTER_ID_FKEY = Internal.createForeignKey(PaymentReceipt.PAYMENT_RECEIPT, DSL.name("payment_receipt_remitter_id_fkey"), new TableField[] { PaymentReceipt.PAYMENT_RECEIPT.REMITTER_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<PaymentReceiptRecord, PaymentRequestRecord> PAYMENT_RECEIPT__PAYMENT_RECEIPT_REQUEST_ID_FKEY = Internal.createForeignKey(PaymentReceipt.PAYMENT_RECEIPT, DSL.name("payment_receipt_request_id_fkey"), new TableField[] { PaymentReceipt.PAYMENT_RECEIPT.REQUEST_ID }, Keys.PAYMENT_REQUEST_PKEY, new TableField[] { PaymentRequest.PAYMENT_REQUEST.ID }, true);
    public static final ForeignKey<PaymentRequestRecord, OrderRecord> PAYMENT_REQUEST__PAYMENT_REQUEST_ORDER_ID_FKEY = Internal.createForeignKey(PaymentRequest.PAYMENT_REQUEST, DSL.name("payment_request_order_id_fkey"), new TableField[] { PaymentRequest.PAYMENT_REQUEST.ORDER_ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ID }, true);
    public static final ForeignKey<PersonRecord, AddressRecord> PERSON__PERSON_ADDRESS_ID_FKEY = Internal.createForeignKey(Person.PERSON, DSL.name("person_address_id_fkey"), new TableField[] { Person.PERSON.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<PersonRecord, BillingAddressRecord> PERSON__PERSON_BILLING_ADDRESS_ID_FKEY = Internal.createForeignKey(Person.PERSON, DSL.name("person_billing_address_id_fkey"), new TableField[] { Person.PERSON.BILLING_ADDRESS_ID }, Keys.BILLING_ADDRESS_PKEY, new TableField[] { BillingAddress.BILLING_ADDRESS.ID }, true);
    public static final ForeignKey<PersonRecord, CurrencyRecord> PERSON__PERSON_PREFERRED_CURRENCY_ID_FKEY = Internal.createForeignKey(Person.PERSON, DSL.name("person_preferred_currency_id_fkey"), new TableField[] { Person.PERSON.PREFERRED_CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.ID }, true);
    public static final ForeignKey<PersonRecord, LanguageRecord> PERSON__PERSON_PREFERRED_LANGUAGE_ID_FKEY = Internal.createForeignKey(Person.PERSON, DSL.name("person_preferred_language_id_fkey"), new TableField[] { Person.PERSON.PREFERRED_LANGUAGE_ID }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.ID }, true);
    public static final ForeignKey<PlanRecord, ProductRecord> PLAN__PLAN_ID_FKEY = Internal.createForeignKey(Plan.PLAN, DSL.name("plan_id_fkey"), new TableField[] { Plan.PLAN.ID }, Keys.PRODUCT_PKEY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<PlanRecord, ProfileRecord> PLAN__PLAN_PROFILE_ID_FKEY = Internal.createForeignKey(Plan.PLAN, DSL.name("plan_profile_id_fkey"), new TableField[] { Plan.PLAN.PROFILE_ID }, Keys.PROFILE_PKEY, new TableField[] { Profile.PROFILE.ID }, true);
    public static final ForeignKey<PlanFeatureRecord, PlanRecord> PLAN_FEATURE__PLAN_FEATURE_PLAN_ID_FKEY = Internal.createForeignKey(PlanFeature.PLAN_FEATURE, DSL.name("plan_feature_plan_id_fkey"), new TableField[] { PlanFeature.PLAN_FEATURE.PLAN_ID }, Keys.PLAN_PKEY, new TableField[] { Plan.PLAN.ID }, true);
    public static final ForeignKey<PlanSubscriptionContractRecord, SubscriptionContractRecord> PLAN_SUBSCRIPTION_CONTRACT__PLAN_SUBSCRIPTION_CONTRACT_ID_FKEY = Internal.createForeignKey(PlanSubscriptionContract.PLAN_SUBSCRIPTION_CONTRACT, DSL.name("plan_subscription_contract_id_fkey"), new TableField[] { PlanSubscriptionContract.PLAN_SUBSCRIPTION_CONTRACT.ID }, Keys.SUBSCRIPTION_CONTRACT_PKEY, new TableField[] { SubscriptionContract.SUBSCRIPTION_CONTRACT.ID }, true);
    public static final ForeignKey<PlanSubscriptionContractRecord, PlanRecord> PLAN_SUBSCRIPTION_CONTRACT__PLAN_SUBSCRIPTION_CONTRACT_PLAN_ID_FKEY = Internal.createForeignKey(PlanSubscriptionContract.PLAN_SUBSCRIPTION_CONTRACT, DSL.name("plan_subscription_contract_plan_id_fkey"), new TableField[] { PlanSubscriptionContract.PLAN_SUBSCRIPTION_CONTRACT.PLAN_ID }, Keys.PLAN_PKEY, new TableField[] { Plan.PLAN.ID }, true);
    public static final ForeignKey<ProductRecord, ProductCatalogRecord> PRODUCT__PRODUCT_CATALOG_ID_FKEY = Internal.createForeignKey(Product.PRODUCT, DSL.name("product_catalog_id_fkey"), new TableField[] { Product.PRODUCT.CATALOG_ID }, Keys.PRODUCT_CATALOG_PKEY, new TableField[] { ProductCatalog.PRODUCT_CATALOG.ID }, true);
    public static final ForeignKey<ProductCatalogRecord, CurrencyRecord> PRODUCT_CATALOG__PRODUCT_CATALOG_CURRENCY_ID_FKEY = Internal.createForeignKey(ProductCatalog.PRODUCT_CATALOG, DSL.name("product_catalog_currency_id_fkey"), new TableField[] { ProductCatalog.PRODUCT_CATALOG.CURRENCY_ID }, Keys.CURRENCY_PKEY, new TableField[] { Currency.CURRENCY.ID }, true);
    public static final ForeignKey<ProfileRecord, ProfileRecord> PROFILE__PROFILE_PARENT_ID_FKEY = Internal.createForeignKey(Profile.PROFILE, DSL.name("profile_parent_id_fkey"), new TableField[] { Profile.PROFILE.PARENT_ID }, Keys.PROFILE_PKEY, new TableField[] { Profile.PROFILE.ID }, true);
    public static final ForeignKey<ProfileAccessRecord, AccessRecord> PROFILE_ACCESS__PROFILE_ACCESS_ACCESS_INHERITED_ID_FKEY = Internal.createForeignKey(ProfileAccess.PROFILE_ACCESS, DSL.name("profile_access_access_inherited_id_fkey"), new TableField[] { ProfileAccess.PROFILE_ACCESS.ACCESS_INHERITED_ID }, Keys.ACCESS_PKEY, new TableField[] { Access.ACCESS.ID }, true);
    public static final ForeignKey<ProfileAccessRecord, ProfileRecord> PROFILE_ACCESS__PROFILE_ACCESS_PROFILE_ID_FKEY = Internal.createForeignKey(ProfileAccess.PROFILE_ACCESS, DSL.name("profile_access_profile_id_fkey"), new TableField[] { ProfileAccess.PROFILE_ACCESS.PROFILE_ID }, Keys.PROFILE_PKEY, new TableField[] { Profile.PROFILE.ID }, true);
    public static final ForeignKey<ProfileAccessParamRecord, ProfileAccessRecord> PROFILE_ACCESS_PARAM__PROFILE_ACCESS_PARAM_ACCESS_ID_FKEY = Internal.createForeignKey(ProfileAccessParam.PROFILE_ACCESS_PARAM, DSL.name("profile_access_param_access_id_fkey"), new TableField[] { ProfileAccessParam.PROFILE_ACCESS_PARAM.ACCESS_ID }, Keys.PROFILE_ACCESS_PKEY, new TableField[] { ProfileAccess.PROFILE_ACCESS.ID }, true);
    public static final ForeignKey<ProfileAccessParamRecord, AccessParamRecord> PROFILE_ACCESS_PARAM__PROFILE_ACCESS_PARAM_PARAM_INHERITED_ID_FKEY = Internal.createForeignKey(ProfileAccessParam.PROFILE_ACCESS_PARAM, DSL.name("profile_access_param_param_inherited_id_fkey"), new TableField[] { ProfileAccessParam.PROFILE_ACCESS_PARAM.PARAM_INHERITED_ID }, Keys.ACCESS_PARAM_PKEY, new TableField[] { AccessParam.ACCESS_PARAM.ID }, true);
    public static final ForeignKey<PurchaseOrderRecord, OrderRecord> PURCHASE_ORDER__PURCHASE_ORDER_ID_FKEY = Internal.createForeignKey(PurchaseOrder.PURCHASE_ORDER, DSL.name("purchase_order_id_fkey"), new TableField[] { PurchaseOrder.PURCHASE_ORDER.ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ID }, true);
    public static final ForeignKey<RecordableRecord, UserRecord> RECORDABLE__RECORDABLE_CREATOR_ID_FKEY = Internal.createForeignKey(Recordable.RECORDABLE, DSL.name("recordable_creator_id_fkey"), new TableField[] { Recordable.RECORDABLE.CREATOR_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<RecordableRecord, UserRecord> RECORDABLE__RECORDABLE_LAST_MODIFIER_ID_FKEY = Internal.createForeignKey(Recordable.RECORDABLE, DSL.name("recordable_last_modifier_id_fkey"), new TableField[] { Recordable.RECORDABLE.LAST_MODIFIER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<RecordableRecord, UserRecord> RECORDABLE__RECORDABLE_OWNER_ID_FKEY = Internal.createForeignKey(Recordable.RECORDABLE, DSL.name("recordable_owner_id_fkey"), new TableField[] { Recordable.RECORDABLE.OWNER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<RegistrationRequestRecord, UserRecord> REGISTRATION_REQUEST__REGISTRATION_REQUEST_APPLICANT_ID_FKEY = Internal.createForeignKey(RegistrationRequest.REGISTRATION_REQUEST, DSL.name("registration_request_applicant_id_fkey"), new TableField[] { RegistrationRequest.REGISTRATION_REQUEST.APPLICANT_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<RegistrationRequestRecord, LanguageRecord> REGISTRATION_REQUEST__REGISTRATION_REQUEST_PREFERRED_LANGUAGE_ID_FKEY = Internal.createForeignKey(RegistrationRequest.REGISTRATION_REQUEST, DSL.name("registration_request_preferred_language_id_fkey"), new TableField[] { RegistrationRequest.REGISTRATION_REQUEST.PREFERRED_LANGUAGE_ID }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.ID }, true);
    public static final ForeignKey<SharedResourceRecord, UserRecord> SHARED_RESOURCE__SHARED_RESOURCE_SUBSCRIBER_ID_FKEY = Internal.createForeignKey(SharedResource.SHARED_RESOURCE, DSL.name("shared_resource_subscriber_id_fkey"), new TableField[] { SharedResource.SHARED_RESOURCE.SUBSCRIBER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<SubscriptionContractRecord, InvoiceRecord> SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_INVOICE_ID_FKEY = Internal.createForeignKey(SubscriptionContract.SUBSCRIPTION_CONTRACT, DSL.name("subscription_contract_invoice_id_fkey"), new TableField[] { SubscriptionContract.SUBSCRIPTION_CONTRACT.INVOICE_ID }, Keys.INVOICE_PKEY, new TableField[] { Invoice.INVOICE.ID }, true);
    public static final ForeignKey<SubscriptionContractRecord, PurchaseOrderRecord> SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_PURCHASE_ORDER_ID_FKEY = Internal.createForeignKey(SubscriptionContract.SUBSCRIPTION_CONTRACT, DSL.name("subscription_contract_purchase_order_id_fkey"), new TableField[] { SubscriptionContract.SUBSCRIPTION_CONTRACT.PURCHASE_ORDER_ID }, Keys.PURCHASE_ORDER_PKEY, new TableField[] { PurchaseOrder.PURCHASE_ORDER.ID }, true);
    public static final ForeignKey<SubscriptionContractRecord, PersonRecord> SUBSCRIPTION_CONTRACT__SUBSCRIPTION_CONTRACT_SUBSCRIBER_ID_FKEY = Internal.createForeignKey(SubscriptionContract.SUBSCRIPTION_CONTRACT, DSL.name("subscription_contract_subscriber_id_fkey"), new TableField[] { SubscriptionContract.SUBSCRIPTION_CONTRACT.SUBSCRIBER_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<UserRecord, ProfileRecord> USER__PROFILE_ID_FKEY = Internal.createForeignKey(User.USER, DSL.name("profile_id_fkey"), new TableField[] { User.USER.PROFILE_ID }, Keys.PROFILE_PKEY, new TableField[] { Profile.PROFILE.ID }, true);
    public static final ForeignKey<UserRecord, PersonRecord> USER__USER_ID_FKEY = Internal.createForeignKey(User.USER, DSL.name("user_id_fkey"), new TableField[] { User.USER.ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<ValueExpressionArgRecord, ExpressionArgRecord> VALUE_EXPRESSION_ARG__VALUE_EXPRESSION_ARG_ID_FKEY = Internal.createForeignKey(ValueExpressionArg.VALUE_EXPRESSION_ARG, DSL.name("value_expression_arg_id_fkey"), new TableField[] { ValueExpressionArg.VALUE_EXPRESSION_ARG.ID }, Keys.EXPRESSION_ARG_PKEY, new TableField[] { ExpressionArg.EXPRESSION_ARG.ID }, true);
    public static final ForeignKey<WhenCaseRecord, FormularCaseExpressionRecord> WHEN_CASE__WHEN_CASE_EXPRESSION_ID_FKEY = Internal.createForeignKey(WhenCase.WHEN_CASE, DSL.name("when_case_expression_id_fkey"), new TableField[] { WhenCase.WHEN_CASE.EXPRESSION_ID }, Keys.FORMULAR_CASE_EXPRESSION_PKEY, new TableField[] { FormularCaseExpression.FORMULAR_CASE_EXPRESSION.ID }, true);
    public static final ForeignKey<WhenCaseRecord, ExpressionArgRecord> WHEN_CASE__WHEN_CASE_LEFT_ARG_ID_FKEY = Internal.createForeignKey(WhenCase.WHEN_CASE, DSL.name("when_case_left_arg_id_fkey"), new TableField[] { WhenCase.WHEN_CASE.LEFT_ARG_ID }, Keys.EXPRESSION_ARG_PKEY, new TableField[] { ExpressionArg.EXPRESSION_ARG.ID }, true);
    public static final ForeignKey<WhenCaseRecord, ExpressionArgRecord> WHEN_CASE__WHEN_CASE_RESULT_ID_FKEY = Internal.createForeignKey(WhenCase.WHEN_CASE, DSL.name("when_case_result_id_fkey"), new TableField[] { WhenCase.WHEN_CASE.RESULT_ID }, Keys.EXPRESSION_ARG_PKEY, new TableField[] { ExpressionArg.EXPRESSION_ARG.ID }, true);
    public static final ForeignKey<WhenCaseRecord, ExpressionArgRecord> WHEN_CASE__WHEN_CASE_RIGHT_ARG_ID_FKEY = Internal.createForeignKey(WhenCase.WHEN_CASE, DSL.name("when_case_right_arg_id_fkey"), new TableField[] { WhenCase.WHEN_CASE.RIGHT_ARG_ID }, Keys.EXPRESSION_ARG_PKEY, new TableField[] { ExpressionArg.EXPRESSION_ARG.ID }, true);
}
