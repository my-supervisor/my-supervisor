package com.supervisor.sdk.datasource;

import com.supervisor.sdk.utils.logging.Logger;
import com.supervisor.sdk.utils.logging.MLogger;
import org.apache.commons.lang.StringUtils;

import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public abstract class BaseStatement implements Statement {

	private static final Logger logger = new MLogger(BaseStatement.class);
	
	protected final Base base;
	private final String statement;
	private final List<Object> parameters;
	
	public BaseStatement(final Base base, final String statement, final List<Object> parameters) {
		this.base = base;
		this.statement = statement;
		this.parameters = parameters;
	}
	
	protected PreparedStatement prepareStatement(int autoGeneratedKeys) throws IOException {
		PreparedStatement pstmt = null;
		
		try {
			logger.debug(statement);
			String paramStr = StringUtils.EMPTY;
			for (Object object : parameters) {
				paramStr = String.format("%s %s", paramStr, object);
			}
			
			logger.debug(paramStr);
			
			pstmt = base.connection().prepareStatement(statement, autoGeneratedKeys);
			
			for (int i = 0; i < parameters.size(); i++) {
				pstmt.setObject(i+1, parameters.get(i));
			}
		} catch (SQLException e) {
			throw new IOException(e);
		}
		
        return pstmt; 
	}

	protected static void close(ResultSet rs) {
		if (rs == null)
			return;
		
		try {
			rs.close();
		} catch (SQLException ignore) {
			logger.error(ignore);
		} 
	}
	
	protected static void close(PreparedStatement pstmt) {
		if (pstmt == null)
			return;
		
		try {
			pstmt.close();
		} catch (SQLException ignore) { 
			logger.error(ignore); 
		}
	}
	
	protected static void close(Base base) throws IOException {
		if(base.withinTransaction()) // transaction en cours ?
			return;
		
		base.close();
	}
}
